From 9c7a70472f26c6ac4af40313b506e7496f3e7e18 Mon Sep 17 00:00:00 2001
From: ladehunter <ladehunter@gmail.com>
Date: Mon, 29 Feb 2016 09:05:59 +0000
Subject: [PATCH] changes for multiwin by tieto's patches

---
 core/java/android/app/Activity.java                |  45 ++-
 core/java/android/app/ActivityManager.java         |  11 +
 core/java/android/app/ActivityManagerNative.java   | 144 +++++++
 core/java/android/app/ActivityThread.java          |  14 +-
 core/java/android/app/IActivityManager.java        |  78 ++++
 core/java/android/content/Intent.java              |  19 +
 core/java/android/provider/Settings.java           |  17 +
 core/java/android/view/InputChannel.java           |  21 +-
 core/java/android/view/ViewRootImpl.java           |   8 +-
 core/java/android/view/Window.java                 |  37 ++
 core/java/android/view/WindowManager.java          |  10 +
 core/jni/android_view_InputChannel.cpp             |  14 +
 core/res/AndroidManifest.xml                       |   9 +
 core/res/res/drawable/mw_app_header_focused.9.png  | Bin 0 -> 2891 bytes
 .../res/res/drawable/mw_app_header_unfocused.9.png | Bin 0 -> 2883 bytes
 core/res/res/drawable/mw_btn_add_content.xml       |   6 +
 .../res/drawable/mw_btn_add_content_clicked.png    | Bin 0 -> 3221 bytes
 .../res/drawable/mw_btn_add_content_default.png    | Bin 0 -> 3231 bytes
 core/res/res/drawable/mw_btn_close.xml             |   6 +
 core/res/res/drawable/mw_btn_close_clicked.png     | Bin 0 -> 3712 bytes
 core/res/res/drawable/mw_btn_close_default.png     | Bin 0 -> 3362 bytes
 core/res/res/drawable/mw_btn_maximize.xml          |   6 +
 core/res/res/drawable/mw_btn_maximize_clicked.png  | Bin 0 -> 3843 bytes
 core/res/res/drawable/mw_btn_maximize_default.png  | Bin 0 -> 3564 bytes
 core/res/res/drawable/mw_btn_minimize.xml          |   6 +
 core/res/res/drawable/mw_btn_minimize_clicked.png  | Bin 0 -> 3942 bytes
 core/res/res/drawable/mw_btn_minimize_default.png  | Bin 0 -> 3819 bytes
 core/res/res/drawable/mw_btn_resize_left.xml       |   6 +
 .../res/drawable/mw_btn_resize_left_clicked.png    | Bin 0 -> 3840 bytes
 .../res/drawable/mw_btn_resize_left_default.png    | Bin 0 -> 3914 bytes
 core/res/res/drawable/mw_btn_resize_right.xml      |   6 +
 .../res/drawable/mw_btn_resize_right_clicked.png   | Bin 0 -> 3825 bytes
 .../res/drawable/mw_btn_resize_right_default.png   | Bin 0 -> 3905 bytes
 core/res/res/drawable/mw_inner_border.xml          |   5 +
 core/res/res/drawable/mw_outer_border.xml          |   5 +
 core/res/res/drawable/mw_outer_border_wide.xml     |   5 +
 core/res/res/layout/mw_decor.xml                   |  85 ++++
 core/res/res/values/colors.xml                     |   6 +
 core/res/res/values/mw_values.xml                  |  10 +
 core/res/res/values/strings.xml                    |  11 +
 core/res/res/values/symbols.xml                    |  29 ++
 libs/multiwindow/Android.mk                        |  33 ++
 .../com.tieto.extension.multiwindow.xml            |  20 +
 .../extension/multiwindow/MultiwindowManager.java  | 135 +++++++
 .../multiwindow/OnWindowChangeListener.java        |  21 +
 .../com/tieto/extension/multiwindow/Window.java    |  65 +++
 .../multiwindow/WindowListenerThread.java          |  91 +++++
 .../android/internal/policy/impl/PhoneWindow.java  | 444 ++++++++++++++++++++-
 .../internal/policy/impl/PhoneWindowManager.java   |  65 +--
 services/input/InputDispatcher.cpp                 |  25 +-
 services/input/InputDispatcher.h                   |  10 +-
 services/input/InputReader.cpp                     |  10 +-
 services/input/PointerController.cpp               |  30 +-
 services/input/PointerController.h                 |  32 +-
 services/input/SpriteController.cpp                |  29 +-
 services/input/SpriteController.h                  |  29 ++
 services/input/tests/InputReader_test.cpp          |  11 +
 .../android/server/am/ActivityManagerService.java  |  93 ++++-
 .../java/com/android/server/am/ActivityRecord.java |  34 +-
 .../java/com/android/server/am/ActivityStack.java  | 104 +++--
 .../android/server/am/ActivityStackSupervisor.java | 386 ++++++++++++------
 .../java/com/android/server/am/TaskRecord.java     |   5 +-
 .../android/server/input/InputManagerService.java  |  13 +
 services/java/com/android/server/wm/DimLayer.java  |  24 +-
 .../java/com/android/server/wm/DisplayContent.java | 179 +++++++--
 services/java/com/android/server/wm/DragState.java |   7 +-
 services/java/com/android/server/wm/StackBox.java  | 110 ++++-
 .../server/wm/StackTapPointerEventListener.java    |  12 +-
 services/java/com/android/server/wm/TaskStack.java |   8 +-
 .../android/server/wm/WindowManagerService.java    | 220 +++++++++-
 .../java/com/android/server/wm/WindowState.java    |  97 +++--
 ...om_android_server_input_InputManagerService.cpp |  22 +-
 72 files changed, 2654 insertions(+), 329 deletions(-)
 create mode 100644 core/res/res/drawable/mw_app_header_focused.9.png
 create mode 100644 core/res/res/drawable/mw_app_header_unfocused.9.png
 create mode 100644 core/res/res/drawable/mw_btn_add_content.xml
 create mode 100755 core/res/res/drawable/mw_btn_add_content_clicked.png
 create mode 100644 core/res/res/drawable/mw_btn_add_content_default.png
 create mode 100644 core/res/res/drawable/mw_btn_close.xml
 create mode 100755 core/res/res/drawable/mw_btn_close_clicked.png
 create mode 100644 core/res/res/drawable/mw_btn_close_default.png
 create mode 100644 core/res/res/drawable/mw_btn_maximize.xml
 create mode 100755 core/res/res/drawable/mw_btn_maximize_clicked.png
 create mode 100755 core/res/res/drawable/mw_btn_maximize_default.png
 create mode 100644 core/res/res/drawable/mw_btn_minimize.xml
 create mode 100755 core/res/res/drawable/mw_btn_minimize_clicked.png
 create mode 100755 core/res/res/drawable/mw_btn_minimize_default.png
 create mode 100644 core/res/res/drawable/mw_btn_resize_left.xml
 create mode 100755 core/res/res/drawable/mw_btn_resize_left_clicked.png
 create mode 100644 core/res/res/drawable/mw_btn_resize_left_default.png
 create mode 100644 core/res/res/drawable/mw_btn_resize_right.xml
 create mode 100755 core/res/res/drawable/mw_btn_resize_right_clicked.png
 create mode 100644 core/res/res/drawable/mw_btn_resize_right_default.png
 create mode 100644 core/res/res/drawable/mw_inner_border.xml
 create mode 100644 core/res/res/drawable/mw_outer_border.xml
 create mode 100644 core/res/res/drawable/mw_outer_border_wide.xml
 create mode 100644 core/res/res/layout/mw_decor.xml
 create mode 100644 core/res/res/values/mw_values.xml
 create mode 100644 libs/multiwindow/Android.mk
 create mode 100644 libs/multiwindow/com.tieto.extension.multiwindow.xml
 create mode 100644 libs/multiwindow/java/com/tieto/extension/multiwindow/MultiwindowManager.java
 create mode 100644 libs/multiwindow/java/com/tieto/extension/multiwindow/OnWindowChangeListener.java
 create mode 100644 libs/multiwindow/java/com/tieto/extension/multiwindow/Window.java
 create mode 100644 libs/multiwindow/java/com/tieto/extension/multiwindow/WindowListenerThread.java

diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index d6db8c2..afe4719 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +22,7 @@ import android.util.SuperNotCalledException;
 import com.android.internal.app.ActionBarImpl;
 import com.android.internal.policy.PolicyManager;
 
+import android.app.ActivityManager.StackBoxInfo;
 import android.content.ComponentCallbacks2;
 import android.content.ComponentName;
 import android.content.ContentResolver;
@@ -86,6 +88,7 @@ import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 
 /**
  * An activity is a single, focused thing that the user can do.  Almost all
@@ -5176,7 +5179,40 @@ public class Activity extends ContextThemeWrapper
         attach(context, aThread, instr, token, 0, application, intent, info, title, parent, id,
             lastNonConfigurationInstances, config);
     }
-    
+
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: returns stackbox in which app was started.
+     * maybe there is an better way to get stackbox than iterating
+     * through all stackboxes. This cause also one issue with permission:
+     * all apps need to have MANAGE_ACTIVITY_STACKS. Currently this is
+     * turned off in AMS.
+     */
+    private int getStackBoxId() {
+        if (mIntent != null &&
+                (mIntent.getFlags() & Intent.FLAG_ACTIVITY_RUN_IN_WINDOW) == 0) {
+            return -1;
+        }
+        try {
+            int taskId = getTaskId();
+            List<StackBoxInfo> list = ActivityManagerNative.getDefault().getStackBoxes();
+            for (StackBoxInfo sb : list) {
+                if ((sb.stackBoxId != 0) && (sb.stack != null) && (sb.stack.taskIds != null)) {
+                    for (int i = 0; i < sb.stack.taskIds.length; i++) {
+                        if (taskId == sb.stack.taskIds[i]) {
+                            return sb.stackBoxId;
+                        }
+                    }
+                }
+            }
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+        return -1;
+    }
+
     final void attach(Context context, ActivityThread aThread,
             Instrumentation instr, IBinder token, int ident,
             Application application, Intent intent, ActivityInfo info,
@@ -5228,6 +5264,13 @@ public class Activity extends ContextThemeWrapper
     }
 
     final void performCreate(Bundle icicle) {
+        /**
+         * Date: Feb 25, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * set stackbox id in window
+         */
+        mWindow.setStackBoxId(getStackBoxId());
         onCreate(icicle);
         mVisibleFromClient = !mWindow.getWindowStyle().getBoolean(
                 com.android.internal.R.styleable.Window_windowNoDisplay, false);
diff --git a/core/java/android/app/ActivityManager.java b/core/java/android/app/ActivityManager.java
index 522a985..526a42a 100644
--- a/core/java/android/app/ActivityManager.java
+++ b/core/java/android/app/ActivityManager.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1305,6 +1306,14 @@ public class ActivityManager {
         public StackBoxInfo[] children;
         public int stackId;
         public StackInfo stack;
+        /**
+         * Date: May 27, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Information, whether stack is floating stack, eg.
+         * can be moved around screen
+         */
+        public boolean floating;
 
         @Override
         public int describeContents() {
@@ -1324,6 +1333,7 @@ public class ActivityManager {
             } else {
                 stack.writeToParcel(dest, flags);
             }
+            dest.writeInt(floating ? 1 : 0);
         }
 
         public void readFromParcel(Parcel source) {
@@ -1339,6 +1349,7 @@ public class ActivityManager {
             } else {
                 stack = StackInfo.CREATOR.createFromParcel(source);
             }
+            floating = source.readInt() == 1;
         }
 
         public static final Creator<StackBoxInfo> CREATOR =
diff --git a/core/java/android/app/ActivityManagerNative.java b/core/java/android/app/ActivityManagerNative.java
index 74266cc..afa1b48 100644
--- a/core/java/android/app/ActivityManagerNative.java
+++ b/core/java/android/app/ActivityManagerNative.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,6 +32,7 @@ import android.content.pm.ParceledListSlice;
 import android.content.pm.UserInfo;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.net.Uri;
 import android.os.Binder;
 import android.os.Bundle;
@@ -2028,6 +2030,69 @@ public abstract class ActivityManagerNative extends Binder implements IActivityM
             reply.writeNoException();
             return true;
         }
+
+        /**
+         * Date: Feb 25, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Change window position
+         */
+        case RELAYOUT_WINDOW_CORNERSTONE_TRANSACTION: {
+            data.enforceInterface(IActivityManager.descriptor);
+            int stackId = data.readInt();
+            Rect r = new Rect();
+            r.readFromParcel(data);
+            boolean[] ret = new boolean[1];
+            ret[0] = relayoutWindow(stackId, r);
+            reply.writeNoException();
+            reply.writeBooleanArray(ret);
+            return true;
+        }
+
+        /**
+         * Date: Aug 28, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Close activity in window
+         */
+        case CLOSE_ACTIVITY_WITH_WINDOW_TRANSACTION: {
+            data.enforceInterface(IActivityManager.descriptor);
+            int stackId = data.readInt();
+            boolean[] ret = new boolean[1];
+            ret[0] = closeActivity(stackId);
+            reply.writeNoException();
+            reply.writeBooleanArray(ret);
+            return true;
+        }
+
+        /**
+         * Date: Aug 28, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Set maximized size of application in window
+         */
+        case SET_MAXIMIZED_WINDOW_SIZE_TRANSACTION: {
+            data.enforceInterface(IActivityManager.descriptor);
+            Rect r = new Rect();
+            r.readFromParcel(data);
+            setMaximizedWindowSize(r);
+            reply.writeNoException();
+            return true;
+        }
+
+        /**
+         * Date: Aug 28, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Get maximized size of application in window
+         */
+        case GET_MAXIMIZED_WINDOW_SIZE_TRANSACTION: {
+            data.enforceInterface(IActivityManager.descriptor);
+            Rect r = getMaximizedWindowSize();
+            r.writeToParcel(reply, 0);
+            reply.writeNoException();
+            return true;
+        }
         }
 
         return super.onTransact(code, data, reply, flags);
@@ -4660,5 +4725,84 @@ class ActivityManagerProxy implements IActivityManager
         reply.recycle();
     }
 
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Change window position
+     */
+    public boolean relayoutWindow(int stackID, Rect r) throws RemoteException {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeInt(stackID);
+        int flags = 0;
+        r.writeToParcel(data, flags);
+        mRemote.transact(RELAYOUT_WINDOW_CORNERSTONE_TRANSACTION, data, reply, 0);
+        reply.readException();
+        boolean[] ret = new boolean[1];
+        reply.readBooleanArray(ret);
+        data.recycle();
+        reply.recycle();
+        return ret[0];
+    }
+
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Close activity in window
+     */
+    public boolean closeActivity(int stackID) throws RemoteException {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeInt(stackID);
+        mRemote.transact(CLOSE_ACTIVITY_WITH_WINDOW_TRANSACTION, data, reply, 0);
+        reply.readException();
+        boolean[] ret = new boolean[1];
+        reply.readBooleanArray(ret);
+        data.recycle();
+        reply.recycle();
+        return ret[0];
+    }
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Setter for custom maximized window size.
+     */
+    public void setMaximizedWindowSize(Rect screen) throws RemoteException {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        screen.writeToParcel(data,0);
+        mRemote.transact(SET_MAXIMIZED_WINDOW_SIZE_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+    }
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Getter for custom maximized window size.
+     */
+    public Rect getMaximizedWindowSize() throws RemoteException {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        mRemote.transact(GET_MAXIMIZED_WINDOW_SIZE_TRANSACTION, data, reply, 0);
+        Rect screen = new Rect();
+        screen.readFromParcel(reply);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+        return screen;
+    }
+
+
     private IBinder mRemote;
 }
diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index 4825c56..2718e82 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -2200,8 +2201,17 @@ public final class ActivityThread {
         // its content on a secondary display if there is one.
         Context baseContext = appContext;
         String pkgName = SystemProperties.get("debug.second-display.pkg");
-        if (pkgName != null && !pkgName.isEmpty()
-                && r.packageInfo.mPackageName.contains(pkgName)) {
+        /**
+         * Date: Mar 18, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * If intent has flag FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY, then it is
+         * runned on external display
+         */
+        boolean externalDisplay = r.intent == null ? false :
+            (r.intent.getFlags() & Intent.FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY) != 0;
+        if (externalDisplay || (pkgName != null && !pkgName.isEmpty()
+                && r.packageInfo.mPackageName.contains(pkgName))) {
             DisplayManagerGlobal dm = DisplayManagerGlobal.getInstance();
             for (int displayId : dm.getDisplayIds()) {
                 if (displayId != Display.DEFAULT_DISPLAY) {
diff --git a/core/java/android/app/IActivityManager.java b/core/java/android/app/IActivityManager.java
index 77c2ea0..e8471e0 100644
--- a/core/java/android/app/IActivityManager.java
+++ b/core/java/android/app/IActivityManager.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,6 +37,7 @@ import android.content.pm.ProviderInfo;
 import android.content.pm.UserInfo;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Debug;
@@ -510,6 +512,50 @@ public interface IActivityManager extends IInterface {
         }
     }
 
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Change window position
+     * @param stackID identifies stack (stackbox id
+     * @param r new window position
+     * @return true on success
+     * @throws RemoteException
+     */
+    public boolean relayoutWindow(int stackID, Rect r) throws RemoteException;
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Close application in window.
+     *
+     * @param stackID identifies stack (stackbox id)
+     * @return true on success
+     * @throws RemoteException
+     */
+    public boolean closeActivity(int stackID) throws RemoteException;
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Setter for custow maximized window size size of application.
+     *
+     * @param rect Takes a parameters of window (in Rect) of application
+     */
+    public void setMaximizedWindowSize(Rect rect) throws RemoteException;
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Getter for custom maximized window size of application.
+     *
+     * @return Rect of window
+     */
+    public Rect getMaximizedWindowSize() throws RemoteException;
+
     String descriptor = "android.app.IActivityManager";
 
     // Please keep these transaction codes the same -- they are also
@@ -694,4 +740,36 @@ public interface IActivityManager extends IInterface {
     int RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+180;
     int GET_PERSISTED_URI_PERMISSIONS_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+181;
     int APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+182;
+
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Transaction for changing window position
+     */
+    int RELAYOUT_WINDOW_CORNERSTONE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+183;
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Transaction for closing application in window
+     */
+    int CLOSE_ACTIVITY_WITH_WINDOW_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+184;
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Transaction for setting custom maximized window size.
+     */
+    int SET_MAXIMIZED_WINDOW_SIZE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+185;
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Transaction for getting maximized window size.
+     */
+    int GET_MAXIMIZED_WINDOW_SIZE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+186;
 }
diff --git a/core/java/android/content/Intent.java b/core/java/android/content/Intent.java
index a289649..8929249 100644
--- a/core/java/android/content/Intent.java
+++ b/core/java/android/content/Intent.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -3396,6 +3397,24 @@ public class Intent implements Parcelable, Cloneable {
     public static final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 0x00000040;
 
     /**
+     * Date: Mar 18, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * This flag is used for launching app on external display
+     * {@hide}
+     */
+    public static final int FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY = 0x00000080;
+
+    /**
+     * Date: Apr 1, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * This flag is used to launch app in multiwindow
+     * {@hide}
+     */
+    public static final int FLAG_ACTIVITY_RUN_IN_WINDOW = 0x00000100;
+
+    /**
      * If set, the new activity is not kept in the history stack.  As soon as
      * the user navigates away from it, the activity is finished.  This may also
      * be set with the {@link android.R.styleable#AndroidManifestActivity_noHistory
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index c75a02c..a718293 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -2306,6 +2307,15 @@ public final class Settings {
         public static final String LOCKSCREEN_DISABLED = "lockscreen.disabled";
 
         /**
+         * Date: 4 Apr 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Whether the Tieto Multiwindow is enabled.
+         * @hide
+         */
+        public static final String TIETO_MULTIWINDOW_ENABLED = "tieto_multiwindow";
+
+        /**
          * @deprecated Use {@link android.provider.Settings.Global#LOW_BATTERY_SOUND}
          * instead
          * @hide
@@ -2473,6 +2483,13 @@ public final class Settings {
             POWER_SOUNDS_ENABLED,       // moved to global
             DOCK_SOUNDS_ENABLED,        // moved to global
             LOCKSCREEN_SOUNDS_ENABLED,
+            /**
+             * Date: 4 Apr 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Whether the Tieto Multiwindow is enabled.
+             */
+            TIETO_MULTIWINDOW_ENABLED,
             SHOW_WEB_SUGGESTIONS,
             NOTIFICATION_LIGHT_PULSE,
             SIP_CALL_OPTIONS,
diff --git a/core/java/android/view/InputChannel.java b/core/java/android/view/InputChannel.java
index 40ee1ad..ebea5a8 100644
--- a/core/java/android/view/InputChannel.java
+++ b/core/java/android/view/InputChannel.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,6 +58,14 @@ public final class InputChannel implements Parcelable {
     private native void nativeDup(InputChannel target);
     
     private native String nativeGetName();
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Sets display. Used only for monitors to distinguish between default display
+     * and external display.
+     */
+    private native void nativeSetDisplayId(int displayId);
 
     /**
      * Creates an uninitialized input channel.
@@ -111,7 +120,17 @@ public final class InputChannel implements Parcelable {
     public void dispose() {
         nativeDispose(false);
     }
-    
+
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Used only for monitor.
+     */
+    public void setDisplayId(int displayId) {
+        nativeSetDisplayId(displayId);
+    }
+
     /**
      * Transfers ownership of the internal state of the input channel to another
      * instance and invalidates this instance.  This is used to pass an input channel
diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java
index d779628..007fead 100644
--- a/core/java/android/view/ViewRootImpl.java
+++ b/core/java/android/view/ViewRootImpl.java
@@ -245,7 +245,13 @@ public final class ViewRootImpl implements ViewParent,
     final DisplayAdjustments mDisplayAdjustments;
 
     // These are accessed by multiple threads.
-    final Rect mWinFrame; // frame given by window manager.
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: find a better way for getting current window position
+     */
+    public final Rect mWinFrame; // frame given by window manager.
 
     final Rect mPendingOverscanInsets = new Rect();
     final Rect mPendingVisibleInsets = new Rect();
diff --git a/core/java/android/view/Window.java b/core/java/android/view/Window.java
index b3a0699..f458d30 100644
--- a/core/java/android/view/Window.java
+++ b/core/java/android/view/Window.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1317,4 +1318,40 @@ public abstract class Window {
      * @param event A key or touch event to inject to this window.
      */
     public void injectInputEvent(InputEvent event) { }
+
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Stackbox id in which app was started.
+     * Setters and getters
+     */
+    private int mStackBoxId = -1;
+
+    /**
+     * @hide
+     */
+    public void setStackBoxId(int id) {
+        mStackBoxId = id;
+    }
+
+    /**
+     * @hide
+     */
+    public int getStackBoxId() {
+        return mStackBoxId;
+    }
+
+    /**
+     * Date: Feb 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: this is used to indicate, that window should
+     * have decor frame. Check if FocusedStackFrame can be used
+     * as decor
+     * @hide
+     */
+    public boolean isMWPanel() {
+        return mStackBoxId != -1;
+    }
 }
diff --git a/core/java/android/view/WindowManager.java b/core/java/android/view/WindowManager.java
index 53a4c0d..96ab072 100644
--- a/core/java/android/view/WindowManager.java
+++ b/core/java/android/view/WindowManager.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -257,6 +258,15 @@ public interface WindowManager extends ViewManager {
          * End of types of application windows.
          */
         public static final int LAST_APPLICATION_WINDOW = 99;
+
+        /**
+         * Date: Apr 11, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Special type of window which indicates floating window
+         * {@hide}
+         */
+        public static final int TYPE_MULTIWINDOW_APPLICATION = 100;
     
         /**
          * Start of types of sub-windows.  The {@link #token} of these windows
diff --git a/core/jni/android_view_InputChannel.cpp b/core/jni/android_view_InputChannel.cpp
index ce475e0..d77e2bc 100644
--- a/core/jni/android_view_InputChannel.cpp
+++ b/core/jni/android_view_InputChannel.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -255,6 +256,14 @@ static void android_view_InputChannel_nativeDup(JNIEnv* env, jobject obj, jobjec
     }
 }
 
+static void android_view_InputChannel_nativeSetDisplayId(JNIEnv* env, jobject obj, jint displayId) {
+    NativeInputChannel* nativeInputChannel =
+            android_view_InputChannel_getNativeInputChannel(env, obj);
+    if (nativeInputChannel) {
+        nativeInputChannel->getInputChannel()->setDisplayId(displayId);
+    }
+}
+
 // ----------------------------------------------------------------------------
 
 static JNINativeMethod gInputChannelMethods[] = {
@@ -273,6 +282,11 @@ static JNINativeMethod gInputChannelMethods[] = {
             (void*)android_view_InputChannel_nativeGetName },
     { "nativeDup", "(Landroid/view/InputChannel;)V",
             (void*)android_view_InputChannel_nativeDup },
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     */
+    { "nativeSetDisplayId", "(I)V", (void*)android_view_InputChannel_nativeSetDisplayId },
 };
 
 #define FIND_CLASS(var, className) \
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index ca31109..d049f9f 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -3,6 +3,7 @@
 /* //device/apps/common/AndroidManifest.xml
 **
 ** Copyright 2006, The Android Open Source Project
+** Copyright 2014, Tieto Poland Sp. z o.o
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
@@ -2518,6 +2519,14 @@
          confirmation UI for full backup/restore -->
     <uses-permission android:name="android.permission.CONFIRM_FULL_BACKUP"/>
 
+    <!-- Date: Sep 09, 2014
+         Copyright (C) Tieto Poland Sp. z o.o
+         Title of an application permission, listed so the user can choose whether
+         they want to allow the application to do this. @hide -->
+    <permission android:name="android.permission.MULTIWINDOW"
+        android:label="@string/permlab_multiwindow"
+        android:description="@string/permdesc_multiwindow"/>
+
     <application android:process="system"
                  android:persistent="true"
                  android:hasCode="false"
diff --git a/core/res/res/drawable/mw_app_header_focused.9.png b/core/res/res/drawable/mw_app_header_focused.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..5b4b61ae72db3c8f7be94f0c104ee60a903ee9a5
GIT binary patch
literal 2891
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_app_header_unfocused.9.png b/core/res/res/drawable/mw_app_header_unfocused.9.png
new file mode 100644
index 0000000000000000000000000000000000000000..2e9256c49a26c8d4530dee5c46980cc79df3128e
GIT binary patch
literal 2883
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_add_content.xml b/core/res/res/drawable/mw_btn_add_content.xml
new file mode 100644
index 0000000..fc28654
--- /dev/null
+++ b/core/res/res/drawable/mw_btn_add_content.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/mw_btn_add_content_clicked" />
+    <item android:drawable="@drawable/mw_btn_add_content_default" />
+</selector>
+
diff --git a/core/res/res/drawable/mw_btn_add_content_clicked.png b/core/res/res/drawable/mw_btn_add_content_clicked.png
new file mode 100755
index 0000000000000000000000000000000000000000..b6a60891501a4543ab67e2a79dbbd627c46ddbd4
GIT binary patch
literal 3221
zcmV;G3~KX<P)<h;3K|Lk000e1NJLTq001xm001xu1^@s6R|5Hm00009a7bBm000XU
z000XU0RWnu7ytkYPiaF#P*7-ZbZ>KLZ*U+<Lqi~Na&Km7Y-Iodc-oy)XH-+^7Crag
z^g>IBfRsybQWXdwQbLP>6p<z>Aqfylh#{fb6;Z(vMMVS~$e@S=j*ftg6;Uh<iVD~V
z<RPMtgQJLw%KPDaqifc@_vX$1wbwr9tn;0-&j-K=43<bUQ8j=JsX`tR;Dg7+#^K~H
zK!FM*Z~zbpvt%K2{UZSY_<lS*D<Z%Lz5oGu(+dayz)hRLFdT>f59&ghTmgWD0l;*T
zI7<kC6aYYajzXpYKt=(8otP$50H6c_V9R4-;{Z@C0AMG7=F<Rxo%or10RUT+Ar%3j
zkpLhQWr#!oXgdI`&sK^>09Y^p6lP1rIRMx#05C~cW=H_Aw*bJ-5DT&Z2n+x)QHX^p
z00esgV8|mQcmRZ%02D^@S3L16t`O%c004NIvOKvYIYoh62rY33S640`D9%Y2D-<?i
z0%4j!F2Z@488U%158(66005wo6%pWr^Zj_v4zAA5HjcIqUoGmt2LB>rV&neh&#Q1i
z007~1e$oCcFS8neI|hJl{-P!B1ZZ9hpmq0)X0i`JwE&>$+E?>%_<lS*MWK+n+1cgf
z<k(8YLR(?VSAG6x!e78w{cQPuJpA|d;J)G{fihizM+Erb!p!tcr5w+a34~(Y=8s4G
zw+sLL9n&JjNn*KJDiq^U5^;`1nvC-@r6P$!k}1U{(*I=Q-z@tBKHoI}uxdU5dyy@u
zU1J0GOD7Ombim^G008p4Z^6_k2m^p<gW=D2|L;HjN1!DDfM!XOaR2~bL?kX$%CkSm
z2mk;?pn)o|K^yeJ7%adB9Ki+L!3+FgHiSYX#KJ-lLJDMn9CBbOtb#%)hRv`YDqt_v
zKpix|QD}yfa1JiQRk#j4a1Z)n2%f<xynzV>LC6RbVIkUx0b+_+BaR3cnT7Zv!AJxW
zizFb)h!jyGOOZ85F;a?DAXP{m@;!0_Ifq<Ex{*7`05XF7hP+2Hl!3BQJ=6@fL%FCo
z8iYoo3(#bAF`ADSpqtQgv>H8(HlgRxt7s3}k3K`kFu>>-2Q$QMFfPW!La{h336o>X
zu_CMttHv6zR;&ZNiS=X8v3CR#fknUxHUxJ<AYmRsNLWl*PS{AOARHt#5!wki2?K;t
z!Y3k=s7tgax)J%r7-BLphge7~Bi0g+6E6^Zh(p9TBoc{3GAFr^0!gu?RMHaCM$&Fl
zBk3%un>0uoBa_M6WNWeqIg~6QE69c9o#eyhGvpiOA@W-aonk<7r1(?fC{oI5N*U!4
z<uv66WtcKSRim0x-Ke2d5jBrmLam{;Qm;{ms1r1GnmNsb7D-E`t)i9F8fX`2_i3-_
zbh;7Ul^#x)&{xvS=|||7=mYe33=M`AgU5(xC>fg=2N-7=cNnjjOr{yriy6mMFgG#l
znCF=fnQv8CDz++o6_Lscl}eQ+l^ZHARH>?_s@|##Rr6KLRFA1%Q+=*RRWnoLsR`7U
zt5vF<Q0r40Q)j6=sE4X&sBct1q<&fbi3VB2Ov6t@q*0);U*o*SAPZv|vv@2aYYnT0
zb%8a+Cb7-ge0D0knEf5Qi#@8Tp*ce{N;6lpQuCB%KL_KOarm5cP6_8Ir<e17iry6O
zDdH&`rZh~sF=bq9s+O0QSgS~@QL9Jmy*94xr=6y~MY~!1fet~(N+(<=M`w@D1)b+p
z*;C!83a1uLJv#NSE~;y#8=<>IcfW3@?wFpwUVxrVZ>QdQz32KIeJ}k~{cZZE^+ya?
z2D1z#2HOnI7(B%_ac?{wFUQ;QQA1tBKtrWrm0_3Rgps+?Jfqb{jYbcQX~taRB;#$y
zZN{S}1|}gUOHJxc?wV3fxuz+mJ4`!F$IZ;mqRrNsHJd##*D~ju=bP7?-?v~|cv>vB
zsJ6IeNwVZxrdjT`yl#bBIa#GxRa#xMMy;K#CDyyGyQdMSxlWT#tDe?p!?5wT$+oGt
z8L;Kp2HUQ-ZMJ=3XJQv;x5ci*?vuTfeY$;({XGW_huIFR9a<fJbF^|4I#xQ~n$Dc=
zKYhjYmgz5NSkDm8*fZm{6U!;YX`NG>(?@3)XSs8O^N5RyOM=TTmp(3=8^+zpz2r)C
z^>JO{deZfso3oq3?Wo(Y?l$ge?uXo;%ru`Vo>?<<(8I_>;8Eq#KMS9gFl*neeosSB
zfoHYnBQIkwkyowPu(zdms`p{<7e4kra-ZWq<2*OsGTvEV%s0Td$hXT+!*8Bnh2KMe
zBmZRodjHV?r+_5^X9J0WL4jKW`}lf%A-|44I@@LTvf1rHjG(ze6+w@Jt%Bvjts!X0
z?2xS?_ve_-k<Mujg;0Lz*3buG=3$G&ehepthlN*$KaOySSQ^nWmo<0M+(UEUMEXRQ
zMBbZcF;6+KElM>iKB_KiJlZ$9G`c^=E@oNG)mWWaNo-3TIW8)$Hg0Ub-~8?KhvJ>$
z3*&nim@mj(aCxE5!t{lw7O5^0EIO7zOo&c6l<+|iDySBWCGrz@C5{St!X3hAA}`T4
z(TLbXTq+(;@<=L8dXnssyft|w#WSTW<++3>sgS%(4NTpeI-VAqb|7ssJvzNHgOZVu
zaYCvgO_R1~>SyL=cFU|~g|hy|Zi}}s9+d~lYqOB71z9Z$wnC=pR9Yz4DhIM>Wmjgu
z&56o6maCpC&F##y%G;1PobR9i?GnNg;gYtchD%p19a!eQtZF&3JaKv33gZ<8D~47E
ztUS1iwkmDaPpj=$m#%)jCVEY4fnLGNg2A-`YwHVD3gv};>)hAvT~AmqS>Lr``i7kw
zJ{5_It`yrBmlc25DBO7E8;5VoznR>Ww5hAaxn$2~(q`%A-YuS64wkBy=9dm`4cXeX
z4c}I@?e+FW+b@^RDBHV(wnMq2zdX3SWv9u`%{xC-q*U}&`cyXV(%rRT*Z6MH?i+i&
z_B8C(+grT%{XWUQ+f@NoP1R=AW&26{v-dx)iK^-Nmiuj8txj!m?Z*Ss1N{dh4z}01
z)YTo*JycSU)+_5r4#yw9{+;i4Ee$peRgIj+;v;ZGdF1K$3E%e~4LaI(jC-u%2h$&R
z9cLXcYC@Xwnns&bn)_Q~Te?roKGD|d-g^8;+aC{{G(1^(O7m37Y1-+6)01cN&y1aw
zoqc{T`P^XJqPBbIW6s}d4{z_f5Om?vMgNQEJG?v2T=KYd^0M3I6IZxbny)%vZR&LD
zJpPl@Psh8QyPB@KTx+@RdcC!KX7}kEo;S|j^u2lU7XQ}Oo;f|;z4Ll+_r>@1-xl3|
zawq-H%e&ckC+@AhPrP6BK<z=<L*0kfKU@CX*zeqbYQT4(^U>T#_XdT7&;F71j}Joy
zkC~6lh7E@6o;W@^IpRNZ{ptLtL(gQ-CY~4mqW;US7Zxvm_|@yz&e53Bp_lTPlfP|z
zrTyx_>lv@x#=^!PzR7qqF<$gm`|ZJZ+;<)Cqu&ot<a{81DF0~rvGr5Xr~8u`lav1h
z1DNytV>2z=0000WV@Og>004R=004l4008;_004mL004C`008P>0026e000+nl3&F}
z0005NNkl<Zc-rjR&1zFo6vgr14aYAOn?lhR2{>`!8#t_rZ{W<a&Z?jf;y~#W2o9>^
zNWp<~ML~Q5ovKhpk*YOu&=ZKGr0F?HHrxf5OA@%O|M^&(eQugFS2jPOi^F2+H@+sU
z;5a_vFPa56KFIeqq=Zg3e*xP80ET*vUdkW(_=4|&me4Mm&d3)j*dA!)<r7*hKnu_U
z1Xseb97#=7fZO<mpM{@&8a=$J4RE*8vrphLuH!|-J+OmQ*uuq#08L(&C-DTABc{+W
z7`k~TE=7*fWjrbkG3z=|9AX}YY&oaXdgMyn#nTe$R1=^-=J%x%>6CD&62OrOXJQLi
z@p4*#_jxpGB;3+I_QW+jn+9O562N}<#Mx<QU_IXl1q}_biif!pkJAP=rv-RdX;fG8
z(Z?j_?=NBs9UaqS3=V33-W}PkgPNZwz)jpM)zHjZ8zn}5UNcbC{Hy_ro1X<hs%gG9
zK+4yhTINS9@h)EBPvL5O0}pCX@pF8`d3$eYO6g<1s;VRKsoW5tKSA@c&;X&;0<-`v
z!2g9OG(fZ{9T;imSMk=~pFN`J9Ci{u=VOgtu!{Tx+y4dt)f7pW^fO`;00000NkvXX
Hu0mjf7cTq#

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_add_content_default.png b/core/res/res/drawable/mw_btn_add_content_default.png
new file mode 100644
index 0000000000000000000000000000000000000000..71aed6c6fef521c4c4ab51cf4e9759e82ddd2a69
GIT binary patch
literal 3231
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
R&3XU;002ovPDHLkV1k4e0WJUl

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_close.xml b/core/res/res/drawable/mw_btn_close.xml
new file mode 100644
index 0000000..e715406
--- /dev/null
+++ b/core/res/res/drawable/mw_btn_close.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/mw_btn_close_clicked" />
+    <item android:drawable="@drawable/mw_btn_close_default" />
+</selector>
+
diff --git a/core/res/res/drawable/mw_btn_close_clicked.png b/core/res/res/drawable/mw_btn_close_clicked.png
new file mode 100755
index 0000000000000000000000000000000000000000..fc7e61fb05eabcfe0675a95c7eef828f3e0292db
GIT binary patch
literal 3712
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_close_default.png b/core/res/res/drawable/mw_btn_close_default.png
new file mode 100644
index 0000000000000000000000000000000000000000..5a6a7abf1c89ba604c7dd4f8f325db6f4e3106f0
GIT binary patch
literal 3362
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_maximize.xml b/core/res/res/drawable/mw_btn_maximize.xml
new file mode 100644
index 0000000..9fbe978
--- /dev/null
+++ b/core/res/res/drawable/mw_btn_maximize.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/mw_btn_maximize_clicked" />
+    <item android:drawable="@drawable/mw_btn_maximize_default" />
+</selector>
+
diff --git a/core/res/res/drawable/mw_btn_maximize_clicked.png b/core/res/res/drawable/mw_btn_maximize_clicked.png
new file mode 100755
index 0000000000000000000000000000000000000000..48c5b9db0f6444b17956b0208fc14a79477701b3
GIT binary patch
literal 3843
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
FV1jP37@Gh9

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_maximize_default.png b/core/res/res/drawable/mw_btn_maximize_default.png
new file mode 100755
index 0000000000000000000000000000000000000000..1eae945e58a1e448d8047d70f5c4341f7b4d2db0
GIT binary patch
literal 3564
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_minimize.xml b/core/res/res/drawable/mw_btn_minimize.xml
new file mode 100644
index 0000000..f06e0fd
--- /dev/null
+++ b/core/res/res/drawable/mw_btn_minimize.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/mw_btn_minimize_clicked" />
+    <item android:drawable="@drawable/mw_btn_minimize_default" />
+</selector>
+
diff --git a/core/res/res/drawable/mw_btn_minimize_clicked.png b/core/res/res/drawable/mw_btn_minimize_clicked.png
new file mode 100755
index 0000000000000000000000000000000000000000..67ac7612fee8b14f9d1609cee636529be37d7b59
GIT binary patch
literal 3942
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
A8UO$Q

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_minimize_default.png b/core/res/res/drawable/mw_btn_minimize_default.png
new file mode 100755
index 0000000000000000000000000000000000000000..11df14d77e9a39f6536d5fae053fdd51d027bcc2
GIT binary patch
literal 3819
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_resize_left.xml b/core/res/res/drawable/mw_btn_resize_left.xml
new file mode 100644
index 0000000..1d646d7
--- /dev/null
+++ b/core/res/res/drawable/mw_btn_resize_left.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/mw_btn_resize_left_clicked" />
+    <item android:drawable="@drawable/mw_btn_resize_left_default" />
+</selector>
+
diff --git a/core/res/res/drawable/mw_btn_resize_left_clicked.png b/core/res/res/drawable/mw_btn_resize_left_clicked.png
new file mode 100755
index 0000000000000000000000000000000000000000..38d7faa963992d51f2463e0b7cd9daa18c43f5cc
GIT binary patch
literal 3840
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
CNFzr8

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_resize_left_default.png b/core/res/res/drawable/mw_btn_resize_left_default.png
new file mode 100644
index 0000000000000000000000000000000000000000..4dabedfa40ab8f3a017238ba9a3e627035784f91
GIT binary patch
literal 3914
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
Y0Q=!6jUF*xRR91007*qoM6N<$g3N0?t^fc4

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_resize_right.xml b/core/res/res/drawable/mw_btn_resize_right.xml
new file mode 100644
index 0000000..0c2d27f
--- /dev/null
+++ b/core/res/res/drawable/mw_btn_resize_right.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/mw_btn_resize_right_clicked" />
+    <item android:drawable="@drawable/mw_btn_resize_right_default" />
+</selector>
+
diff --git a/core/res/res/drawable/mw_btn_resize_right_clicked.png b/core/res/res/drawable/mw_btn_resize_right_clicked.png
new file mode 100755
index 0000000000000000000000000000000000000000..2b7726641b7258b57cb2e0c2a455d8abaa024a0e
GIT binary patch
literal 3825
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

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_btn_resize_right_default.png b/core/res/res/drawable/mw_btn_resize_right_default.png
new file mode 100644
index 0000000000000000000000000000000000000000..c6565da86232dececf2db13860b33301387936d9
GIT binary patch
literal 3905
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
P00000NkvXXu0mjfCt5B8

literal 0
HcmV?d00001

diff --git a/core/res/res/drawable/mw_inner_border.xml b/core/res/res/drawable/mw_inner_border.xml
new file mode 100644
index 0000000..25a4794
--- /dev/null
+++ b/core/res/res/drawable/mw_inner_border.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright Tieto 2014 Dariusz Kluska -->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <stroke android:width="@dimen/mw_inner_border" android:color="@color/mw_transparent_white" />
+</shape>
\ No newline at end of file
diff --git a/core/res/res/drawable/mw_outer_border.xml b/core/res/res/drawable/mw_outer_border.xml
new file mode 100644
index 0000000..455bad1
--- /dev/null
+++ b/core/res/res/drawable/mw_outer_border.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright Tieto 2014 Dariusz Kluska -->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <stroke android:width="@dimen/mw_outer_border" android:color="@color/mw_white_border" />
+</shape>
\ No newline at end of file
diff --git a/core/res/res/drawable/mw_outer_border_wide.xml b/core/res/res/drawable/mw_outer_border_wide.xml
new file mode 100644
index 0000000..bf0b331
--- /dev/null
+++ b/core/res/res/drawable/mw_outer_border_wide.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright Tieto 2014 Dariusz Kluska -->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <stroke android:width="@dimen/mw_outer_border_wide" android:color="@color/mw_white_border" />
+</shape>
diff --git a/core/res/res/layout/mw_decor.xml b/core/res/res/layout/mw_decor.xml
new file mode 100644
index 0000000..c356c22
--- /dev/null
+++ b/core/res/res/layout/mw_decor.xml
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright Tieto 2014 -->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/mwOuterBorder"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@drawable/mw_outer_border"
+    android:padding="@dimen/mw_outer_border" >
+    <RelativeLayout
+        android:id="@+id/mwInnerBorder"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@drawable/mw_inner_border" >
+        <LinearLayout
+            android:id="@+id/mw_decor_header"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/mw_inner_border"
+            android:layout_alignParentTop="true"
+            android:layout_gravity="center"
+            android:orientation="horizontal"
+            android:background="@color/mw_blue_decor" >
+            <ImageView
+                android:id="@+id/mwIcon"
+                android:layout_width="20dp"
+                android:layout_height="20dp"
+                android:layout_gravity="center|left" />
+            <TextView
+                android:id="@+id/mwTitle"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center|left"
+                android:textColor="@android:color/black" />
+            <View
+                android:layout_width="0dp"
+                android:layout_height="0dp"
+                android:layout_weight="1" />
+            <ImageButton
+                android:id="@+id/mwMaximizeBtn"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:scaleType="fitStart"
+                android:adjustViewBounds="true"
+                android:background="@null"
+                android:padding="4dp"
+                android:src="@drawable/mw_btn_maximize" />
+            <ImageButton
+                android:id="@+id/mwCloseBtn"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:scaleType="fitStart"
+                android:adjustViewBounds="true"
+                android:background="@null"
+                android:padding="4dp"
+                android:src="@drawable/mw_btn_close" />
+        </LinearLayout>
+        <ImageButton
+            android:id="@+id/mwResizeLeft"
+            android:layout_width="@dimen/mw_inner_border"
+            android:layout_height="@dimen/mw_inner_border"
+            android:scaleType="fitCenter"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentLeft="true"
+            android:background="@color/mw_blue_decor"
+            android:padding="4dp"
+            android:src="@drawable/mw_btn_resize_left" />
+        <ImageButton
+            android:id="@+id/mwResizeRight"
+            android:layout_width="@dimen/mw_inner_border"
+            android:layout_height="@dimen/mw_inner_border"
+            android:scaleType="fitCenter"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentRight="true"
+            android:background="@color/mw_blue_decor"
+            android:padding="4dp"
+            android:src="@drawable/mw_btn_resize_right" />
+    </RelativeLayout>
+    <View
+        android:id="@+id/mwBackground"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginLeft="@dimen/mw_inner_border"
+        android:layout_marginTop="@dimen/mw_inner_border"
+        android:layout_marginRight="@dimen/mw_inner_border"
+        android:layout_marginBottom="@dimen/mw_inner_border"/>
+</RelativeLayout>
\ No newline at end of file
diff --git a/core/res/res/values/colors.xml b/core/res/res/values/colors.xml
index 28e7af7..130f863 100644
--- a/core/res/res/values/colors.xml
+++ b/core/res/res/values/colors.xml
@@ -202,5 +202,11 @@
     <color name="keyguard_avatar_frame_pressed_color">#ff35b5e5</color>
 
     <color name="accessibility_focus_highlight">#80ffff00</color>
+
+    <!-- MW colors -->
+    <color name="mw_blue_decor">#76ceea</color>
+    <color name="mw_white_border">#FFFFFFFF</color>
+    <color name="mw_transparent_white">#B3FFFFFF</color>
+    
 </resources>
 
diff --git a/core/res/res/values/mw_values.xml b/core/res/res/values/mw_values.xml
new file mode 100644
index 0000000..b9d71eb
--- /dev/null
+++ b/core/res/res/values/mw_values.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (C) 2013 Tieto Corporation.
+Dariusz Kluska
+-->
+<resources>
+    <dimen name="mw_outer_border">2dip</dimen>
+    <dimen name="mw_inner_border">28dip</dimen>
+    <dimen name="mw_outer_border_wide">30dip</dimen>
+</resources>
\ No newline at end of file
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 098fbbe..3b62acb 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -3,6 +3,7 @@
 /* //device/apps/common/assets/res/any/strings.xml
 **
 ** Copyright 2006, The Android Open Source Project
+** Copyright 2014, Tieto Poland Sp. z o.o
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
@@ -1985,6 +1986,16 @@
     <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
     <string name="permdesc_accessNetworkConditions">Allows an application to listen for observations on network conditions. Should never be needed for normal apps.</string>
 
+    <!-- Date: Sep 09, 2014
+         Copyright (C) Tieto Poland Sp. z o.o
+         Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permlab_multiwindow">allow to use multiwindow manager</string>
+    <!-- Date: Sep 09, 2014
+         Copyright (C) Tieto Poland Sp. z o.o
+         Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
+    <string name="permdesc_multiwindow">Allows an applicaton to use multiwindow manager and start applications in windows.</string>
+
+
     <!-- Policy administration -->
 
     <!-- Title of policy access to limiting the user's password choices -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 48bfa95..0d69dee 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1767,4 +1767,33 @@
   <java-symbol type="string" name="reboot_system" />
   <java-symbol type="string" name="reboot_progress" />
   <java-symbol type="drawable" name="ic_lock_reboot" />
+
+  <!-- Multiwindow -->
+  <java-symbol type="id" name="mwCloseBtn" />
+  <java-symbol type="id" name="mwMaximizeBtn" />  
+  <java-symbol type="id" name="mw_decor_header" />
+  <java-symbol type="id" name="mwInnerBorder" />
+  <java-symbol type="id" name="mwOuterBorder" />
+  <java-symbol type="id" name="mwBackground" />
+  <java-symbol type="id" name="mwResizeLeft" />
+  <java-symbol type="id" name="mwResizeRight" />
+  <java-symbol type="id" name="mwIcon" />
+  <java-symbol type="id" name="mwTitle" />
+  <java-symbol type="color" name="mw_blue_decor" />
+  <java-symbol type="color" name="mw_transparent_white" />
+  <java-symbol type="color" name="mw_white_border" />
+  <java-symbol type="dimen" name="mw_inner_border" />
+  <java-symbol type="dimen" name="mw_outer_border" />
+  <java-symbol type="drawable" name="mw_outer_border" />
+  <java-symbol type="drawable" name="mw_outer_border_wide" />
+  <java-symbol type="drawable" name="mw_app_header_focused" />
+  <java-symbol type="drawable" name="mw_app_header_unfocused" />
+  <java-symbol type="drawable" name="mw_btn_add_content" />
+  <java-symbol type="drawable" name="mw_btn_close" />
+  <java-symbol type="drawable" name="mw_btn_maximize" />
+  <java-symbol type="drawable" name="mw_btn_minimize" />
+  <java-symbol type="drawable" name="mw_btn_resize_left" />
+  <java-symbol type="drawable" name="mw_btn_resize_right" />
+  <java-symbol type="layout" name="mw_decor" />
+
 </resources>
diff --git a/libs/multiwindow/Android.mk b/libs/multiwindow/Android.mk
new file mode 100644
index 0000000..551136d
--- /dev/null
+++ b/libs/multiwindow/Android.mk
@@ -0,0 +1,33 @@
+#
+# Copyright (C) 2014 Tieto Poland Sp. z o.o.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := $(call all-subdir-java-files)
+LOCAL_MODULE:= com.tieto.extension.multiwindow
+LOCAL_MODULE_TAGS := optional
+LOCAL_PROGUARD_ENABLED := disabled
+LOCAL_DEX_PREOPT := false
+include $(BUILD_JAVA_LIBRARY)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := com.tieto.extension.multiwindow.xml
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := ETC
+LOCAL_MODULE_PATH := $(TARGET_OUT_ETC)/permissions
+LOCAL_SRC_FILES := $(LOCAL_MODULE)
+include $(BUILD_PREBUILT)
diff --git a/libs/multiwindow/com.tieto.extension.multiwindow.xml b/libs/multiwindow/com.tieto.extension.multiwindow.xml
new file mode 100644
index 0000000..090d8ab
--- /dev/null
+++ b/libs/multiwindow/com.tieto.extension.multiwindow.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2014 Tieto Poland Sp. z o.o.
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<permissions>
+    <library name="com.tieto.extension.multiwindow"
+            file="/system/framework/com.tieto.extension.multiwindow.jar" />
+</permissions>
diff --git a/libs/multiwindow/java/com/tieto/extension/multiwindow/MultiwindowManager.java b/libs/multiwindow/java/com/tieto/extension/multiwindow/MultiwindowManager.java
new file mode 100644
index 0000000..d6e1362
--- /dev/null
+++ b/libs/multiwindow/java/com/tieto/extension/multiwindow/MultiwindowManager.java
@@ -0,0 +1,135 @@
+/*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.tieto.extension.multiwindow;
+
+import android.os.RemoteException;
+import android.util.Log;
+import android.app.ActivityManagerNative;
+import android.app.IActivityManager;
+import android.app.ActivityManager.StackBoxInfo;
+import android.content.pm.PackageManager;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Rect;
+import java.util.List;
+import java.util.Vector;
+
+public class MultiwindowManager {
+
+    public static String TAG = "MultiwindowManager";
+
+    private IActivityManager mService = null;
+    private Context mContext = null;
+    private OnWindowChangeListener mOnAppListener;
+    private static WindowListenerThread sWindowListener =  null;
+    private static String sPermissionName = "android.permission.MULTIWINDOW";
+
+    public MultiwindowManager(Context ctx) {
+        mService = ActivityManagerNative.getDefault();
+        mContext = ctx;
+        checkPermission();
+    }
+
+    public void setOnWindowChangeListener(OnWindowChangeListener listener) {
+        if(sWindowListener != null){
+            sWindowListener.interrupt();
+        }
+        sWindowListener = new WindowListenerThread(this);
+        sWindowListener.setOnWindowChangeListener(listener);
+    }
+
+    public void startActivity(Intent intent) {
+        intent.addFlags(Intent.FLAG_ACTIVITY_RUN_IN_WINDOW);
+        mContext.startActivity(intent);
+    }
+
+    public boolean relayoutWindow(int stackId, Rect windowFrame) {
+        try {
+            return mService.relayoutWindow(stackId, windowFrame);
+        } catch (RemoteException e) {
+            Log.e(TAG, "relayoutWindow failed ", e);
+        }
+        return false;
+    }
+
+    /**
+     * Method for closing application by stackbox id, it close tasks by their ids
+     * from stackboxes.
+     *
+     * @param stackId Argument for id of application stack.
+     * @return true if close succeed, false if not.
+     */
+    public boolean closeApplication(int stackId) {
+        try {
+            return mService.closeActivity(stackId);
+        } catch (RemoteException e) {
+            Log.e(TAG, "closeApplication failed ", e);
+        }
+        return false;
+    }
+
+    public Vector<Window> getAllWindows() {
+        Vector<Window> ret = new Vector<Window>();
+        List<StackBoxInfo> list;
+        String pkg;
+        try {
+            list = mService.getStackBoxes();
+        } catch (RemoteException e) {
+            Log.e(TAG, "getAllWindows failes", e);
+            return ret;
+        }
+        for (StackBoxInfo sb : list) {
+            if (sb.floating) {
+                /*
+                 * Split in pkg is nessesary, we need only name of the app without activity name.
+                 * First we need to split StackInfo message
+                 */
+                pkg = sb.stack.toString().split(" ")[5].split("/")[0];
+                ret.add(new Window(sb.bounds,pkg, sb.stackId));
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * Method for setting custom size of maximized window of Application window
+     * by pressing a maximize button. This method is used when you want different
+     * window size on mazimize than normal.
+     *
+     * @param fullScreen takes size of window in fullscreen.
+     * @return true if method succeed, false if not.
+     */
+    public boolean setMaximizedWindowSize(Rect size) {
+        try {
+            mService.setMaximizedWindowSize(size);
+            return true;
+        } catch (RemoteException e) {
+            Log.e(TAG, "setFullScreenRect failed ", e);
+            return false;
+        }
+    }
+
+    public void checkPermission(){
+        PackageManager pm = mContext.getPackageManager();
+        String packageName = mContext.getPackageName();
+        int havePermission = pm.checkPermission(sPermissionName, packageName);
+
+        if (havePermission != pm.PERMISSION_GRANTED) {
+            throw new SecurityException("You don't have permission to use Multiwindow!");
+        }
+    }
+
+}
diff --git a/libs/multiwindow/java/com/tieto/extension/multiwindow/OnWindowChangeListener.java b/libs/multiwindow/java/com/tieto/extension/multiwindow/OnWindowChangeListener.java
new file mode 100644
index 0000000..f2426fc
--- /dev/null
+++ b/libs/multiwindow/java/com/tieto/extension/multiwindow/OnWindowChangeListener.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.tieto.extension.multiwindow;
+
+public interface OnWindowChangeListener {
+    void onWindowAdd(Window appWindow);
+    void onWindowRemoved(Window appWindow);
+}
diff --git a/libs/multiwindow/java/com/tieto/extension/multiwindow/Window.java b/libs/multiwindow/java/com/tieto/extension/multiwindow/Window.java
new file mode 100644
index 0000000..6ae2f59
--- /dev/null
+++ b/libs/multiwindow/java/com/tieto/extension/multiwindow/Window.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.tieto.extension.multiwindow;
+
+import android.graphics.Rect;
+import java.lang.Object;
+
+public class Window extends Object {
+
+    private Rect mFrame;
+    private String mPackage;
+    private int mStackId;
+
+    public Window(Rect frame, String pkg, int stackId) {
+        mFrame = frame;
+        mPackage = pkg;
+        mStackId = stackId;
+    }
+
+    public int getStackId() {
+        return mStackId;
+    }
+
+    public Rect getFrame() {
+        return mFrame;
+    }
+
+    public String getPackage() {
+        return mPackage;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == this) {
+            return true;
+        }
+        if (o == null) {
+            return false;
+        }
+        if (o.getClass() != getClass()) {
+            return false;
+        }
+
+        Window windowObject = (Window) o;
+
+        if (windowObject.getStackId() == this.mStackId) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/libs/multiwindow/java/com/tieto/extension/multiwindow/WindowListenerThread.java b/libs/multiwindow/java/com/tieto/extension/multiwindow/WindowListenerThread.java
new file mode 100644
index 0000000..ea85126
--- /dev/null
+++ b/libs/multiwindow/java/com/tieto/extension/multiwindow/WindowListenerThread.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.tieto.extension.multiwindow;
+
+import android.os.RemoteException;
+import android.util.Log;
+import java.util.List;
+import java.util.Vector;
+
+/*
+ * WindowListenerThread
+ * Temporary solution for checking windows from MultiwindowManager.
+ * Thread should be called from methods in ActivityManagerService in further version.
+ */
+public class WindowListenerThread extends Thread {
+    private MultiwindowManager mMultiwindow;
+    private OnWindowChangeListener mOnAppListener;
+    private Vector<Window> mActualWindows;
+    private final int REFRESH_TIME = 500;
+    private final boolean DEBUG = false;
+
+    public WindowListenerThread(MultiwindowManager mw) {
+        mMultiwindow = mw;
+        mActualWindows = mw.getAllWindows();
+    }
+
+    @Override
+    public void run() {
+        while(!isInterrupted()) {
+            Vector<Window> refreshWindows = mMultiwindow.getAllWindows();
+            if (checkForNewWindows(mActualWindows, refreshWindows)) {
+                for (Window window : refreshWindows) {
+                    if (!mActualWindows.contains(window)) {
+                        if (DEBUG) {
+                            Log.d(MultiwindowManager.TAG, window.getPackage());
+                        }
+                        mOnAppListener.onWindowAdd(window);
+                    }
+                }
+                for (Window window : mActualWindows) {
+                    if (!refreshWindows.contains(window)) {
+                        if (DEBUG) {
+                            Log.d(MultiwindowManager.TAG, window.getPackage());
+                        }
+                        mOnAppListener.onWindowRemoved(window);
+                    }
+                }
+                mActualWindows = refreshWindows;
+            }
+            try {
+                Thread.sleep(REFRESH_TIME);
+            } catch(InterruptedException e) {
+                Log.d(MultiwindowManager.TAG, "Application Listener thread dead", e);
+                interrupt();
+            }
+        }
+    }
+
+    public void setOnWindowChangeListener(OnWindowChangeListener listener) {
+        mOnAppListener = listener;
+        if (!isAlive()) {
+            start();
+        }
+    }
+
+    private boolean checkForNewWindows(Vector<Window> actualWindows, Vector<Window> newWindows) {
+        if (actualWindows.size() != newWindows.size()) {
+            return true;
+        }
+
+        for (Window window : actualWindows) {
+            if (!(newWindows.contains(window))) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindow.java b/policy/src/com/android/internal/policy/impl/PhoneWindow.java
index 44fc1f8..d021f93 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindow.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindow.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,15 +40,21 @@ import com.android.internal.widget.ActionBarContextView;
 import com.android.internal.widget.ActionBarOverlayLayout;
 import com.android.internal.widget.ActionBarView;
 
+import android.app.ActivityManager.StackBoxInfo;
 import android.app.KeyguardManager;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ApplicationInfo;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.PixelFormat;
 import android.graphics.Rect;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.net.Uri;
@@ -80,6 +87,7 @@ import android.view.MenuItem;
 import android.view.MotionEvent;
 import android.view.SurfaceHolder;
 import android.view.View;
+import android.view.View.OnTouchListener;
 import android.view.ViewGroup;
 import android.view.ViewManager;
 import android.view.ViewParent;
@@ -91,14 +99,21 @@ import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
+import android.widget.Button;
+import android.widget.ImageButton;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
+import java.util.List;
+
+import android.app.ActivityManagerNative;
+import android.view.View.OnClickListener;
 
 /**
  * Android-specific Window.
@@ -127,6 +142,13 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
 
     // This is the top-level view of the window, containing the window decor.
     private DecorView mDecor;
+    /**
+     * Date:2013
+     * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: move decor to FocusedStackFrame
+     */
+    private DecorMWView mDecorMW;
 
     // This is the view in which the window contents are placed. It is either
     // mDecor itself, or a child of mDecor where the contents go.
@@ -2452,6 +2474,10 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         }
 
         public void setWindowBackground(Drawable drawable) {
+            if (mDecorMW != null) {
+                mDecorMW.setBackground(drawable);
+                drawable = new ColorDrawable(Color.TRANSPARENT);
+            }
             if (getBackground() != drawable) {
                 setBackgroundDrawable(drawable);
                 if (drawable != null) {
@@ -2646,6 +2672,24 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             if (cb != null && !isDestroyed() && mFeatureId < 0) {
                 cb.onWindowFocusChanged(hasWindowFocus);
             }
+            /**
+             * Date: Jun 17, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * TietoTODO: This is temporary solution for highlighting window
+             * border. The correct way - Activity should be notified whether has
+             * focus or not and Activity is propagating this information to
+             * PhoneWindow. One Activity can have multiple window (eg. popup
+             * menu). If other window than main Activity window has focus, than
+             * decor is not highlighted.
+             */
+            if (mDecorMW != null) {
+                if (hasWindowFocus) {
+                    mDecorMW.setFocus();
+                } else {
+                    mDecorMW.unsetFocus();
+                }
+            }
         }
 
         void updateWindowResizeState() {
@@ -2798,7 +2842,336 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         }
     }
 
-    protected ViewGroup generateLayout(DecorView decor) {
+
+    /**
+     * Date:2013
+     * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: move to FocusedStackFrame
+     */
+    private class TouchListener implements OnTouchListener {
+
+        private boolean mRelayoutSuccess = false;
+        private Rect mFrame;
+        private Rect mNewFrame;
+        private int mLastX = 0;
+        private int mLastY = 0;
+        private ResizeWindow mResizeWindow;
+        private ImageButton mMaximizeBtn;
+        private View mParentBtn = null;
+        private Rect mFullScreen;
+
+        public TouchListener(ResizeWindow rw, ImageButton maximizeButton, Rect fullScreen) {
+            mResizeWindow = rw;
+            mMaximizeBtn = maximizeButton;
+            mFullScreen = fullScreen;
+        }
+
+        public TouchListener(ResizeWindow rw, ImageButton maximizeButton, View parent, Rect fullScreen) {
+            mResizeWindow = rw;
+            mMaximizeBtn = maximizeButton;
+            mParentBtn = parent;
+            mFullScreen = fullScreen;
+        }
+
+        private boolean fitWindowInScreen(Rect pos) {
+            int w = pos.width() - 50;
+            if (pos.left < (mFullScreen.left - w)) {
+                return false;
+            }
+            if (pos.right > (mFullScreen.right + w)) {
+                return false;
+            }
+            int h = pos.height() - 50;
+            if (pos.bottom > (mFullScreen.bottom + h)) {
+                return false;
+            }
+            if (pos.top < mFullScreen.top) {
+                pos.bottom = mFullScreen.top + pos.height();
+                pos.top = mFullScreen.top;
+            }
+            return true;
+        }
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            int rawX = (int) event.getRawX();
+            int rawY = (int) event.getRawY();
+
+            if(MotionEvent.ACTION_DOWN == event.getAction()){
+                mLastX = (int) event.getRawX();
+                mLastY = (int) event.getRawY();
+                mRelayoutSuccess = false;
+                mFrame = new Rect(mDecor.getViewRootImpl().mWinFrame);
+                if (mParentBtn != null) {
+                    mParentBtn.setPressed(true);
+                }
+            }
+            if(MotionEvent.ACTION_MOVE == event.getAction()){
+                try{
+                    int dx = rawX - mLastX;
+                    int dy = rawY - mLastY;
+                    Rect r = mResizeWindow.resize(mFrame, dx, dy);
+                    if (fitWindowInScreen(r)) {
+                        mNewFrame = r;
+                        mRelayoutSuccess = ActivityManagerNative.getDefault().relayoutWindow(getStackBoxId(), mNewFrame);
+                    }
+                }
+                catch (RemoteException e) {
+                    e.printStackTrace();
+                }
+            }
+//            if(MotionEvent.ACTION_UP == event.getAction()){
+//                if (mParentBtn != null) {
+//                    mParentBtn.setPressed(false);
+//                }
+//                try{
+//                    if (mRelayoutSuccess) {
+////                        ActivityManagerNative.getDefault().relayoutWindowCallback(getStackID(), mNewFrame);
+////                        mMaximizeBtn.setImageResource(com.android.internal.R.drawable.mw_btn_maximize);
+//                    }
+//                }
+//                catch (RemoteException e) {
+//                    e.printStackTrace();
+//                }
+//            }
+            if(MotionEvent.ACTION_CANCEL == event.getAction()) {
+                if (mParentBtn != null) {
+                    mParentBtn.setPressed(false);
+                }
+            }
+            return true;
+        }
+    }
+
+    public abstract class ResizeWindow {
+        protected Rect mTmpFrame = new Rect();
+        public abstract Rect resize(Rect frame, int diffX, int diffY);
+    }
+
+    /**
+     * Date:2013
+     * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: move to FocusedStackFrame
+     */
+    class DecorMWView {
+
+        private LinearLayout mHeader;
+        private ImageButton mCloseBtn;
+        private ImageButton mMaximizeBtn;
+        private View mInnerBorder;
+        private View mOuterBorder;
+        private View mBackground;
+        private View mLeftResize;
+        private View mRightResize;
+        private ImageView mAppIcon;
+        private TextView mAppName;
+
+        private View mDecorView;
+        private int mTopBarHeight;
+        private int mMultiwindowHeight;
+        private int mStatusBarHeight;
+        private int mBorderPadding;
+        private boolean mRemoteConnected = false;
+        private Rect mFullScreen;
+
+        private Rect mOldSize;
+
+        public DecorMWView() {
+            //String cls = getContext().getString(com.android.internal.R.string.mw_launcher_class);
+            //String pkg = cls.substring(0, cls.lastIndexOf("."));
+            //mDefaultApp = new ComponentName(pkg, cls);
+
+            mDecorView = getLayoutInflater().inflate(com.android.internal.R.layout.mw_decor, null);
+
+            mHeader = (LinearLayout)mDecorView.findViewById(com.android.internal.R.id.mw_decor_header);
+            mTopBarHeight = getContext().getResources().getDimensionPixelSize(com.android.internal.R.dimen.mw_inner_border);
+            //mMultiwindowHeight = getContext().getResources().getDimensionPixelSize(android.R.dimen.mw_app_height);
+            mStatusBarHeight = getContext().getResources().getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
+            mBorderPadding = mDecorView.getPaddingLeft() + mTopBarHeight;
+            mCloseBtn = (ImageButton)mDecorView.findViewById(com.android.internal.R.id.mwCloseBtn);
+            mMaximizeBtn = (ImageButton)mDecorView.findViewById(com.android.internal.R.id.mwMaximizeBtn);
+            mInnerBorder = mDecorView.findViewById(com.android.internal.R.id.mwInnerBorder);
+            mOuterBorder = mDecorView.findViewById(com.android.internal.R.id.mwOuterBorder);
+            mBackground = mDecorView.findViewById(com.android.internal.R.id.mwBackground);
+            mLeftResize = mDecorView.findViewById(com.android.internal.R.id.mwResizeLeft);
+            mRightResize = mDecorView.findViewById(com.android.internal.R.id.mwResizeRight);
+            mAppIcon = (ImageView) mDecorView.findViewById(com.android.internal.R.id.mwIcon);
+            mAppName =(TextView) mDecorView.findViewById(com.android.internal.R.id.mwTitle);
+            final DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();
+            mFullScreen = new Rect(0, mStatusBarHeight, metrics.widthPixels, metrics.heightPixels);
+
+            PackageManager pm = getContext().getPackageManager();
+            ApplicationInfo ai = getContext().getApplicationInfo();
+            Drawable icon = ai.loadIcon(pm);
+            mAppName.setText(pm.getApplicationLabel(ai));
+            mAppIcon.setImageDrawable(icon);
+
+            mHeader.setOnTouchListener(new TouchListener(new ResizeWindow() {
+                @Override
+                public Rect resize(Rect frame, int diffX, int diffY) {
+                    mTmpFrame.left = frame.left + diffX;
+                    mTmpFrame.top = frame.top + diffY;
+                    mTmpFrame.right = frame.right + diffX;
+                    mTmpFrame.bottom = frame.bottom + diffY;
+                    return mTmpFrame;
+                }
+            }, mMaximizeBtn, mFullScreen));
+
+            mLeftResize.setOnTouchListener(new TouchListener(new ResizeWindow() {
+                @Override
+                public Rect resize(Rect frame, int diffX, int diffY) {
+                    mTmpFrame.left = frame.left + diffX;
+                    mTmpFrame.top = frame.top;
+                    mTmpFrame.right = frame.right;
+                    mTmpFrame.bottom = frame.bottom + diffY;
+                    return mTmpFrame;
+                }
+            }, mMaximizeBtn, mLeftResize, mFullScreen));
+
+            mRightResize.setOnTouchListener(new TouchListener(new ResizeWindow() {
+                @Override
+                public Rect resize(Rect frame, int diffX, int diffY) {
+                    mTmpFrame.left = frame.left;
+                    mTmpFrame.top = frame.top;
+                    mTmpFrame.right = frame.right + diffX;
+                    mTmpFrame.bottom = frame.bottom + diffY;
+                    return mTmpFrame;
+                }
+            }, mMaximizeBtn, mRightResize, mFullScreen));
+
+            mCloseBtn.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    try {
+                        ActivityManagerNative.getDefault().closeActivity(getStackBoxId());
+                    } catch (RemoteException e) {
+                        Log.e(TAG, "Close button failes", e);
+                    }
+                }
+            });
+
+            mMaximizeBtn.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Rect actualWindowSize = new Rect(mDecor.getViewRootImpl().mWinFrame);
+                    try {
+                        Rect customMaximizedWindowSize = ActivityManagerNative.getDefault().getMaximizedWindowSize();
+                        if (!customMaximizedWindowSize.equals(new Rect())) {
+                            mFullScreen = customMaximizedWindowSize;
+                        } else {
+                            mFullScreen = new Rect(0, mStatusBarHeight, metrics.widthPixels, metrics.heightPixels);
+                        }
+                        if (!actualWindowSize.equals(mFullScreen)){
+                            mOldSize = actualWindowSize;
+                            ActivityManagerNative.getDefault().relayoutWindow(getStackBoxId(), mFullScreen);
+                            actualWindowSize = mFullScreen;
+                        } else {
+                            if (mOldSize == null) {
+                                mOldSize = new Rect(mDecor.getViewRootImpl().mWinFrame);
+                            }
+                            actualWindowSize = mOldSize;
+                            ActivityManagerNative.getDefault().relayoutWindow(getStackBoxId(), mOldSize);
+                        }
+                    } catch (RemoteException e) {
+                        Log.e(TAG, "Maximize failed", e);
+                    }
+                }
+            });
+
+            unsetFocus();
+        }
+
+        public int getTopBarHeight() {
+            return mTopBarHeight;
+        }
+
+        public int getBorderPadding() {
+            return mBorderPadding;
+        }
+
+        public void startMultiwindowApp(final Intent intent,final int index) {
+            new Thread(new Runnable() {
+                public void run() {
+//                    try {
+//                        ActivityManagerNative.getDefault().startCornerstoneApp(intent, index);
+//                    } catch (RemoteException e) {
+//                        e.printStackTrace();
+//                    }
+                }
+            }).start();
+        }
+
+        public View getView(){
+            return mDecorView;
+        }
+
+        void setFocus(){
+            int tietoBlue = com.android.internal.R.color.mw_blue_decor;
+            mLeftResize.setBackgroundResource(tietoBlue);
+            mRightResize.setBackgroundResource(tietoBlue);
+            mHeader.setBackgroundResource(tietoBlue);
+            if (mRemoteConnected) {
+                mInnerBorder.setBackgroundResource(0);
+                mInnerBorder.setBackgroundColor(Color.TRANSPARENT);
+                mOuterBorder.setBackgroundResource(com.android.internal.R.drawable.mw_outer_border_wide);
+            } else {
+                mInnerBorder.setBackgroundResource(com.android.internal.R.color.mw_transparent_white);
+                mOuterBorder.setBackgroundResource(com.android.internal.R.drawable.mw_outer_border);
+            }
+            mDecorView.invalidate();
+        }
+
+        void unsetFocus() {
+            mLeftResize.setBackgroundResource(0);
+            mRightResize.setBackgroundResource(0);
+            mLeftResize.setBackgroundColor(Color.TRANSPARENT);
+            mRightResize.setBackgroundColor(Color.TRANSPARENT);
+            mHeader.setBackgroundResource(0);
+            mHeader.setBackgroundColor(Color.TRANSPARENT);
+            if (mRemoteConnected) {
+                mInnerBorder.setBackgroundResource(0);
+                mInnerBorder.setBackgroundColor(Color.TRANSPARENT);
+            } else {
+                mInnerBorder.setBackgroundResource(com.android.internal.R.color.mw_transparent_white);
+            }
+            mOuterBorder.setBackgroundResource(com.android.internal.R.drawable.mw_outer_border);
+            mDecorView.invalidate();
+        }
+
+        public void processFocus(int stackID) {
+//            if(stackID == getStackID())
+//                mDecorMW.setFocus();
+//            else
+//                mDecorMW.unsetFocus();
+        }
+
+        public void showTopBar(boolean show) {
+//            ObjectAnimator anim;
+//            mRemoteConnected = !show;
+//            if (show) {
+//                anim = ObjectAnimator.ofFloat(mDecorMW.mInnerBorder, "alpha", 0f, 1f);
+//            } else {
+//                anim = ObjectAnimator.ofFloat(mDecorMW.mInnerBorder, "alpha", 1f, 0f);
+//            }
+//            anim.setDuration(500);
+//            anim.start();
+        }
+
+        public void setBackground(Drawable d) {
+            mBackground.setBackground(d);
+        }
+
+    }
+
+    /**
+     * Date: May 13, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * of = offset for Android decor. It makes space for multiwindow decor.
+     */
+    protected ViewGroup generateLayout(DecorView decor, int of) {
         // Apply data from current theme.
 
         TypedArray a = getWindowStyle();
@@ -3020,7 +3393,16 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         mDecor.startChanging();
 
         View in = mLayoutInflater.inflate(layoutResource, null);
-        decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
+        /**
+         * Date: May 13, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Makes place for multiwindow decor.
+         */
+        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(
+                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+        lp.setMargins(of, of, of, of);
+        decor.addView(in, lp);
 
         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);
         if (contentParent == null) {
@@ -3075,6 +3457,16 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
     private void installDecor() {
         if (mDecor == null) {
             mDecor = generateDecor();
+            /**
+             * Date:2013
+             * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+             *
+             * TietoTODO: move to FocusedStackFrame
+             */
+            Log.v(TAG, "isMWPanel " + isMWPanel());
+            if(isMWPanel()) {
+                installMWDecor(mDecor);
+            }
             mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
             mDecor.setIsRootNamespace(true);
             if (!mInvalidatePanelMenuPosted && mInvalidatePanelMenuFeatures != 0) {
@@ -3082,7 +3474,17 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             }
         }
         if (mContentParent == null) {
-            mContentParent = generateLayout(mDecor);
+            /**
+             * Date: May 13, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * If multiwindow, set margin for content (make place for decor frame).
+             */
+            if (isMWPanel()) {
+                mContentParent = generateLayout(mDecor, mDecorMW.getBorderPadding());
+            } else {
+                mContentParent = generateLayout(mDecor, 0);
+            }
 
             // Set up decor part of UI to ignore fitsSystemWindows if appropriate.
             mDecor.makeOptionalFitsSystemWindows();
@@ -3182,6 +3584,17 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         }
     }
 
+    /**
+     * Date:2013
+     * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: move to FocusedStackFrame
+     */
+    private void installMWDecor(DecorView decor) {
+        mDecorMW = new DecorMWView();
+        decor.addView(mDecorMW.getView());
+    }
+
     private Drawable loadImageURI(Uri uri) {
         try {
             return Drawable.createFromStream(
@@ -3889,4 +4302,29 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
     void sendCloseSystemWindows(String reason) {
         PhoneWindowManager.sendCloseSystemWindows(getContext(), reason);
     }
+
+    /**
+     * Date:2013
+     * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: dead code
+     */
+    public void onWindowFocusChanged(int stackID) {
+        if(mDecorMW != null)
+            mDecorMW.processFocus(stackID);
+//        super.onWindowFocusChanged(stackID);
+    }
+
+    /**
+     * Date:2013
+     * Copyright (C) 2013 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: dead code
+     */
+    public void onShowTopBar(boolean show) {
+        if (mDecorMW != null) {
+//            Log.v(TAG, "stackId: " + getStackID() + "onShowTopBar " + show);
+            mDecorMW.showTopBar(show);
+        }
+    }
 }
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 80553a8..1a0ec51 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1409,82 +1410,92 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         case TYPE_WALLPAPER:
             // wallpaper is at the bottom, though the window manager may move it.
             return 2;
-        case TYPE_PHONE:
+            /**
+             * Date: Apr 11, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Make space for additional window type. This will allow to run
+             * to types of windows (fullscreen window and multiwindow) without
+             * overlapping multiwindow windows by fullscreen window.
+             */
+        case TYPE_MULTIWINDOW_APPLICATION:
             return 3;
-        case TYPE_SEARCH_BAR:
+        case TYPE_PHONE:
             return 4;
+        case TYPE_SEARCH_BAR:
+            return 5;
         case TYPE_RECENTS_OVERLAY:
         case TYPE_SYSTEM_DIALOG:
-            return 5;
+            return 6;
         case TYPE_TOAST:
             // toasts and the plugged-in battery thing
-            return 6;
+            return 7;
         case TYPE_PRIORITY_PHONE:
             // SIM errors and unlock.  Not sure if this really should be in a high layer.
-            return 7;
+            return 8;
         case TYPE_DREAM:
             // used for Dreams (screensavers with TYPE_DREAM windows)
-            return 8;
+            return 9;
         case TYPE_SYSTEM_ALERT:
             // like the ANR / app crashed dialogs
-            return 9;
+            return 10;
         case TYPE_INPUT_METHOD:
             // on-screen keyboards and other such input method user interfaces go here.
-            return 10;
+            return 11;
         case TYPE_INPUT_METHOD_DIALOG:
             // on-screen keyboards and other such input method user interfaces go here.
-            return 11;
+            return 12;
         case TYPE_KEYGUARD_SCRIM:
             // the safety window that shows behind keyguard while keyguard is starting
-            return 12;
+            return 13;
         case TYPE_KEYGUARD:
             // the keyguard; nothing on top of these can take focus, since they are
             // responsible for power management when displayed.
-            return 13;
-        case TYPE_KEYGUARD_DIALOG:
             return 14;
-        case TYPE_STATUS_BAR_SUB_PANEL:
+        case TYPE_KEYGUARD_DIALOG:
             return 15;
-        case TYPE_STATUS_BAR:
+        case TYPE_STATUS_BAR_SUB_PANEL:
             return 16;
-        case TYPE_STATUS_BAR_PANEL:
+        case TYPE_STATUS_BAR:
             return 17;
+        case TYPE_STATUS_BAR_PANEL:
+            return 18;
         case TYPE_VOLUME_OVERLAY:
             // the on-screen volume indicator and controller shown when the user
             // changes the device volume
-            return 18;
+            return 19;
         case TYPE_SYSTEM_OVERLAY:
             // the on-screen volume indicator and controller shown when the user
             // changes the device volume
-            return 19;
+            return 20;
         case TYPE_NAVIGATION_BAR:
             // the navigation bar, if available, shows atop most things
-            return 20;
+            return 21;
         case TYPE_NAVIGATION_BAR_PANEL:
             // some panels (e.g. search) need to show on top of the navigation bar
-            return 21;
+            return 22;
         case TYPE_SYSTEM_ERROR:
             // system-level error dialogs
-            return 22;
+            return 23;
         case TYPE_MAGNIFICATION_OVERLAY:
             // used to highlight the magnified portion of a display
-            return 23;
+            return 24;
         case TYPE_DISPLAY_OVERLAY:
             // used to simulate secondary display devices
-            return 24;
+            return 25;
         case TYPE_DRAG:
             // the drag layer: input for drag-and-drop is associated with this window,
             // which sits above all other focusable windows
-            return 25;
-        case TYPE_SECURE_SYSTEM_OVERLAY:
             return 26;
-        case TYPE_BOOT_PROGRESS:
+        case TYPE_SECURE_SYSTEM_OVERLAY:
             return 27;
+        case TYPE_BOOT_PROGRESS:
+            return 28;
         case TYPE_POINTER:
             // the (mouse) pointer layer
-            return 28;
-        case TYPE_HIDDEN_NAV_CONSUMER:
             return 29;
+        case TYPE_HIDDEN_NAV_CONSUMER:
+            return 30;
         }
         Log.e(TAG, "Unknown window type: " + type);
         return 2;
diff --git a/services/input/InputDispatcher.cpp b/services/input/InputDispatcher.cpp
index 10a639e..0d5a345 100644
--- a/services/input/InputDispatcher.cpp
+++ b/services/input/InputDispatcher.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -858,10 +859,14 @@ bool InputDispatcher::dispatchMotionLocked(
         return true;
     }
 
-    // TODO: support sending secondary display events to input monitors
-    if (isMainDisplay(entry->displayId)) {
-        addMonitoringTargetsLocked(inputTargets);
-    }
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Use the same input monitor (Window Manager) for two displays. Naive
+     * approach, but I hope that it works good
+     */
+    addMonitoringTargetsLocked(inputTargets, entry->displayId);
 
     // Dispatch the motion.
     if (conflictingPointerActions) {
@@ -1604,9 +1609,17 @@ void InputDispatcher::addWindowTargetLocked(const sp<InputWindowHandle>& windowH
     target.scaleFactor = windowInfo->scaleFactor;
     target.pointerIds = pointerIds;
 }
-
-void InputDispatcher::addMonitoringTargetsLocked(Vector<InputTarget>& inputTargets) {
+/**
+ * Date: Apr 3, 2014
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Add support for multidisplay. Each display has its own monitor.
+ */
+void InputDispatcher::addMonitoringTargetsLocked(Vector<InputTarget>& inputTargets, int displayId) {
     for (size_t i = 0; i < mMonitoringChannels.size(); i++) {
+        if (mMonitoringChannels[i]->getDisplayId() != displayId) {
+            continue;
+        }
         inputTargets.push();
 
         InputTarget& target = inputTargets.editTop();
diff --git a/services/input/InputDispatcher.h b/services/input/InputDispatcher.h
index 190e7b2..6d27d48 100644
--- a/services/input/InputDispatcher.h
+++ b/services/input/InputDispatcher.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1019,7 +1020,14 @@ private:
 
     void addWindowTargetLocked(const sp<InputWindowHandle>& windowHandle,
             int32_t targetFlags, BitSet32 pointerIds, Vector<InputTarget>& inputTargets);
-    void addMonitoringTargetsLocked(Vector<InputTarget>& inputTargets);
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Add support for multidisplay.
+     */
+    void addMonitoringTargetsLocked(Vector<InputTarget>& inputTargets,
+            int displayId = ADISPLAY_ID_DEFAULT);
 
     void pokeUserActivityLocked(const EventEntry* eventEntry);
     bool checkInjectionPermission(const sp<InputWindowHandle>& windowHandle,
diff --git a/services/input/InputReader.cpp b/services/input/InputReader.cpp
index 31c7cdc..ca52ee6 100644
--- a/services/input/InputReader.cpp
+++ b/services/input/InputReader.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -2475,7 +2476,14 @@ void CursorInputMapper::sync(nsecs_t when) {
         mPointerController->getPosition(&x, &y);
         pointerCoords.setAxisValue(AMOTION_EVENT_AXIS_X, x);
         pointerCoords.setAxisValue(AMOTION_EVENT_AXIS_Y, y);
-        displayId = ADISPLAY_ID_DEFAULT;
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * To support mouse on external display, it is needed to get information
+         * where controller is displayed.
+         */
+        displayId = mPointerController->getDisplayId();
     } else {
         pointerCoords.setAxisValue(AMOTION_EVENT_AXIS_X, deltaX);
         pointerCoords.setAxisValue(AMOTION_EVENT_AXIS_Y, deltaY);
diff --git a/services/input/PointerController.cpp b/services/input/PointerController.cpp
index 9af521b..790fcb9 100644
--- a/services/input/PointerController.cpp
+++ b/services/input/PointerController.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -307,9 +308,29 @@ void PointerController::setInactivityTimeout(InactivityTimeout inactivityTimeout
     }
 }
 
-void PointerController::setDisplayViewport(int32_t width, int32_t height, int32_t orientation) {
+/**
+ * Date: Mar 21, 2014
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * See interface description.
+ */
+int32_t PointerController::getDisplayId() {
+    AutoMutex _l(mLock);
+
+    return mLocked.displayId;
+}
+
+/**
+ * Date: Mar 21, 2014
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Allow setting point controller to external and internal display
+ */
+void PointerController::setDisplayViewport(int32_t width, int32_t height,
+        int32_t orientation, int32_t displayId) {
     AutoMutex _l(mLock);
 
+    mLocked.displayId = displayId;
     // Adjust to use the display's unrotated coordinate frame.
     if (orientation == DISPLAY_ORIENTATION_90
             || orientation == DISPLAY_ORIENTATION_270) {
@@ -483,6 +504,13 @@ void PointerController::removeInactivityTimeoutLocked() {
 void PointerController::updatePointerLocked() {
     mSpriteController->openTransaction();
 
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Set surface to desired display.
+     */
+    mLocked.pointerSprite->setLayerStack(mLocked.displayId);
     mLocked.pointerSprite->setLayer(Sprite::BASE_LAYER_POINTER);
     mLocked.pointerSprite->setPosition(mLocked.pointerX, mLocked.pointerY);
 
diff --git a/services/input/PointerController.h b/services/input/PointerController.h
index 790c0bb..68e7c7c 100644
--- a/services/input/PointerController.h
+++ b/services/input/PointerController.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -105,6 +106,14 @@ public:
 
     /* Removes all spots. */
     virtual void clearSpots() = 0;
+
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Returns where PointerController is displayed.
+     */
+    virtual int32_t getDisplayId() = 0;
 };
 
 
@@ -170,7 +179,20 @@ public:
             const uint32_t* spotIdToIndex, BitSet32 spotIdBits);
     virtual void clearSpots();
 
-    void setDisplayViewport(int32_t width, int32_t height, int32_t orientation);
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     */
+    virtual int32_t getDisplayId();
+
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Pass displayId on which pointer should be displayed.
+     */
+    void setDisplayViewport(int32_t width, int32_t height, int32_t orientation,
+            int32_t displayId = ADISPLAY_ID_DEFAULT);
     void setPointerIcon(const SpriteIcon& icon);
     void setInactivityTimeout(InactivityTimeout inactivityTimeout);
 
@@ -218,6 +240,14 @@ private:
         int32_t displayWidth;
         int32_t displayHeight;
         int32_t displayOrientation;
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Indicates if sprite should be displayed on internal or external
+         * display.
+         */
+        int32_t displayId;
 
         InactivityTimeout inactivityTimeout;
 
diff --git a/services/input/SpriteController.cpp b/services/input/SpriteController.cpp
index fd9c66b..742617e 100644
--- a/services/input/SpriteController.cpp
+++ b/services/input/SpriteController.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -250,7 +251,7 @@ void SpriteController::doUpdateSprites() {
         if (update.state.surfaceControl != NULL && (becomingVisible || becomingHidden
                 || (wantSurfaceVisibleAndDrawn && (update.state.dirty & (DIRTY_ALPHA
                         | DIRTY_POSITION | DIRTY_TRANSFORMATION_MATRIX | DIRTY_LAYER
-                        | DIRTY_VISIBILITY | DIRTY_HOTSPOT))))) {
+                        | DIRTY_VISIBILITY | DIRTY_HOTSPOT | DIRTY_LAYER_STACK))))) {
             status_t status;
             if (!haveTransaction) {
                 SurfaceComposerClient::openGlobalTransaction();
@@ -298,6 +299,20 @@ void SpriteController::doUpdateSprites() {
                 }
             }
 
+            /**
+             * Date: Mar 21, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Sets layerStack in surface.
+             */
+            if (wantSurfaceVisibleAndDrawn &&
+                    (becomingVisible || (update.state.dirty & DIRTY_LAYER_STACK))) {
+                status = update.state.surfaceControl->setLayerStack(update.state.layerStack);
+                if (status) {
+                    ALOGE("Error %d setting sprite surface layer stack.", status);
+                }
+            }
+
             if (becomingVisible) {
                 status = update.state.surfaceControl->show();
                 if (status) {
@@ -469,6 +484,18 @@ void SpriteController::SpriteImpl::setTransformationMatrix(
         invalidateLocked(DIRTY_TRANSFORMATION_MATRIX);
     }
 }
+/**
+ * Date: Mar 21, 2014
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ */
+void SpriteController::SpriteImpl::setLayerStack(int32_t layerStack) {
+    AutoMutex _l(mController->mLock);
+
+    if (mLocked.state.layerStack != layerStack) {
+        mLocked.state.layerStack = layerStack;
+        invalidateLocked(DIRTY_LAYER_STACK);
+    }
+}
 
 void SpriteController::SpriteImpl::invalidateLocked(uint32_t dirty) {
     bool wasDirty = mLocked.state.dirty;
diff --git a/services/input/SpriteController.h b/services/input/SpriteController.h
index 75e4843..e6c98e9 100644
--- a/services/input/SpriteController.h
+++ b/services/input/SpriteController.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -122,6 +123,15 @@ public:
 
     /* Sets the sprite transformation matrix. */
     virtual void setTransformationMatrix(const SpriteTransformationMatrix& matrix) = 0;
+
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Sets layerStack for sprite. Needed to display sprite only on external
+     * display.
+     */
+    virtual void setLayerStack(int32_t layerStack) = 0;
 };
 
 /*
@@ -167,6 +177,13 @@ private:
         DIRTY_LAYER = 1 << 4,
         DIRTY_VISIBILITY = 1 << 5,
         DIRTY_HOTSPOT = 1 << 6,
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Flag which refresh only layer stack
+         */
+        DIRTY_LAYER_STACK = 1 << 7,
     };
 
     /* Describes the state of a sprite.
@@ -190,6 +207,13 @@ private:
         int32_t layer;
         float alpha;
         SpriteTransformationMatrix transformationMatrix;
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Holds on which layerStack (display) sprite is shown
+         */
+        int32_t layerStack;
 
         sp<SurfaceControl> surfaceControl;
         int32_t surfaceWidth;
@@ -222,6 +246,11 @@ private:
         virtual void setLayer(int32_t layer);
         virtual void setAlpha(float alpha);
         virtual void setTransformationMatrix(const SpriteTransformationMatrix& matrix);
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         */
+        virtual void setLayerStack(int32_t layerStack);
 
         inline const SpriteState& getStateLocked() const {
             return mLocked.state;
diff --git a/services/input/tests/InputReader_test.cpp b/services/input/tests/InputReader_test.cpp
index f068732..615bb24 100644
--- a/services/input/tests/InputReader_test.cpp
+++ b/services/input/tests/InputReader_test.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -119,6 +120,16 @@ private:
 
     virtual void clearSpots() {
     }
+
+    /**
+     * Date: Mar 25, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Fake method. Only to instantiate class.
+     */
+    virtual int32_t getDisplayId() {
+        return 0;
+    }
 };
 
 
diff --git a/services/java/com/android/server/am/ActivityManagerService.java b/services/java/com/android/server/am/ActivityManagerService.java
index e2050fc..a43af20 100644
--- a/services/java/com/android/server/am/ActivityManagerService.java
+++ b/services/java/com/android/server/am/ActivityManagerService.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006-2008 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -125,6 +126,7 @@ import android.content.pm.ServiceInfo;
 import android.content.res.CompatibilityInfo;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.net.Proxy;
 import android.net.ProxyProperties;
 import android.net.Uri;
@@ -338,6 +340,15 @@ public final class ActivityManagerService extends ActivityManagerNative
     // devices.
     private boolean mShowDialogs = true;
 
+     /**
+     * Date: Aug 29, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Variable for keeping size of maximized window of application window if not set,
+     * and kept as new Rect(), maximized window is taken from metrics height and width.
+     */
+    private Rect mMaximizedWindowSize = new Rect();
+
     /**
      * Description of a request to start a new activity, which has been held
      * due to app switches being disabled.
@@ -2244,6 +2255,13 @@ public final class ActivityManagerService extends ActivityManagerNative
                 ActivityRecord r = stack.topRunningActivityLocked(null);
                 if (r != null) {
                     setFocusedActivityLocked(r);
+                    /**
+                     * Date: Apr 7, 2014
+                     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                     *
+                     * Switch activity state from paused to resumed.
+                     */
+                    moveTaskToFront(r.task.taskId, 0, null);
                 }
             }
         }
@@ -7206,8 +7224,14 @@ public final class ActivityManagerService extends ActivityManagerNative
 
     @Override
     public List<StackBoxInfo> getStackBoxes() {
-        enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,
-                "getStackBoxes()");
+        /**
+         * Date: Feb 25, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * TietoTODO: turn on permissions somehow
+         */
+//        enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,
+//                "getStackBoxes()");
         long ident = Binder.clearCallingIdentity();
         try {
             List<StackBoxInfo> stackBoxInfos = mWindowManager.getStackBoxInfos();
@@ -16622,4 +16646,69 @@ public final class ActivityManagerService extends ActivityManagerNative
         info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
         return info;
     }
+
+    @Override
+    public boolean relayoutWindow(int stackID, Rect r) {
+        /**
+         * Date: Feb 25, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * TietoTODO: add posibility to relayout only own window
+         */
+//        enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,
+//                "resizeStackBox()");
+        long ident = Binder.clearCallingIdentity();
+        try {
+            Slog.v(TAG, "RelayoutWindow: " + stackID + " pos:" + r);
+            mWindowManager.relayoutWindow(stackID, r);
+        } finally {
+            Binder.restoreCallingIdentity(ident);
+        }
+        return true;
+    }
+
+    /**
+     * Date: Aug 28, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Method for closing application by stackbox id and closing their tasks.
+     */
+    @Override
+    public boolean closeActivity(int stackID) {
+        boolean succeed = false;
+        long ident = Binder.clearCallingIdentity();
+        for (StackBoxInfo sb : getStackBoxes()) {
+            if (sb.stackId == stackID) {
+                for (int next = sb.stack.taskIds.length - 1; next >= 0; --next) {
+                    succeed = removeTask(sb.stack.taskIds[next], 0);
+                }
+            }
+        }
+        Binder.restoreCallingIdentity(ident);
+        return succeed;
+    }
+
+    /**
+     * Date: Aug 29, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Setter for custom maximized window size of maximize button on window
+     */
+    @Override
+    public void setMaximizedWindowSize(Rect screen) {
+        mMaximizedWindowSize = screen;
+    }
+
+    /**
+     * Date: Aug 29, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Getter for custom maximized window size of maximize button on window
+     */
+    @Override
+    public Rect getMaximizedWindowSize() {
+        return mMaximizedWindowSize;
+    }
+
+
 }
diff --git a/services/java/com/android/server/am/ActivityRecord.java b/services/java/com/android/server/am/ActivityRecord.java
index 63a52e6..81f074d 100755
--- a/services/java/com/android/server/am/ActivityRecord.java
+++ b/services/java/com/android/server/am/ActivityRecord.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -74,7 +75,7 @@ final class ActivityRecord {
     final String processName; // process where this component wants to run
     final String taskAffinity; // as per ActivityInfo.taskAffinity
     final boolean stateNotNeeded; // As per ActivityInfo.flags
-    boolean fullscreen; // covers the full screen?
+    private boolean fullscreen; // covers the full screen?
     final boolean noDisplay;  // activity is not displayed?
     final boolean componentSpecified;  // did caller specifiy an explicit component?
 
@@ -234,7 +235,7 @@ final class ActivityRecord {
                 pw.print(" visible="); pw.print(visible);
                 pw.print(" sleeping="); pw.print(sleeping);
                 pw.print(" idle="); pw.println(idle);
-        pw.print(prefix); pw.print("fullscreen="); pw.print(fullscreen);
+        pw.print(prefix); pw.print("fullscreen="); pw.print(isFullscreen());
                 pw.print(" noDisplay="); pw.print(noDisplay);
                 pw.print(" immersive="); pw.print(immersive);
                 pw.print(" launchMode="); pw.println(launchMode);
@@ -437,10 +438,10 @@ final class ActivityRecord {
 
             AttributeCache.Entry ent = AttributeCache.instance().get(packageName,
                     realTheme, com.android.internal.R.styleable.Window, userId);
-            fullscreen = ent != null && !ent.array.getBoolean(
+            setFullscreen(ent != null && !ent.array.getBoolean(
                     com.android.internal.R.styleable.Window_windowIsFloating, false)
                     && !ent.array.getBoolean(
-                    com.android.internal.R.styleable.Window_windowIsTranslucent, false);
+                    com.android.internal.R.styleable.Window_windowIsTranslucent, false));
             noDisplay = ent != null && ent.array.getBoolean(
                     com.android.internal.R.styleable.Window_windowNoDisplay, false);
 
@@ -471,7 +472,7 @@ final class ActivityRecord {
             dataDir = null;
             processName = null;
             packageName = null;
-            fullscreen = true;
+            setFullscreen(true);
             noDisplay = false;
             mActivityType = APPLICATION_ACTIVITY_TYPE;
             immersive = false;
@@ -510,7 +511,7 @@ final class ActivityRecord {
     }
 
     boolean changeWindowTranslucency(boolean toOpaque) {
-        if (fullscreen == toOpaque) {
+        if (isFullscreen() == toOpaque) {
             return false;
         }
         AttributeCache.Entry ent =
@@ -524,7 +525,7 @@ final class ActivityRecord {
         // Keep track of the number of fullscreen activities in this task.
         task.numFullscreen += toOpaque ? +1 : -1;
 
-        fullscreen = toOpaque;
+        setFullscreen(toOpaque);
         return true;
     }
 
@@ -1063,4 +1064,23 @@ final class ActivityRecord {
         stringName = sb.toString();
         return toString();
     }
+
+    /**
+     * Date: Apr 23, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Add setter and getter for fullscreen. App can be fullscreen only if it is
+     * not started in multiwindow.
+     */
+    boolean isFullscreen() {
+        if (task != null && task.stack != null &&
+                task.stack.isMultiwindowStack()) {
+            return false;
+        }
+        return fullscreen;
+    }
+
+    void setFullscreen(boolean fullscreen) {
+        this.fullscreen = fullscreen;
+    }
 }
diff --git a/services/java/com/android/server/am/ActivityStack.java b/services/java/com/android/server/am/ActivityStack.java
index a02b4c4..ea3ecc2 100755
--- a/services/java/com/android/server/am/ActivityStack.java
+++ b/services/java/com/android/server/am/ActivityStack.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -233,6 +234,14 @@ final class ActivityStack {
     /** Run all ActivityStacks through this */
     final ActivityStackSupervisor mStackSupervisor;
 
+    /**
+     * Date: Apr 23, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Does stack run any Activities in window?
+     */
+    private boolean mIsMultiwindowStack;
+
     static final int PAUSE_TIMEOUT_MSG = ActivityManagerService.FIRST_ACTIVITY_STACK_MSG + 1;
     static final int DESTROY_TIMEOUT_MSG = ActivityManagerService.FIRST_ACTIVITY_STACK_MSG + 2;
     static final int LAUNCH_TICK_MSG = ActivityManagerService.FIRST_ACTIVITY_STACK_MSG + 3;
@@ -1000,7 +1009,7 @@ final class ActivityStack {
                 if (r.isHomeActivity()) {
                     return true;
                 }
-                if (!r.finishing && r.fullscreen) {
+                if (!r.finishing && r.isFullscreen()) {
                     // Passed activity is over a fullscreen activity.
                     return false;
                 }
@@ -1054,8 +1063,32 @@ final class ActivityStack {
         // make sure any activities under it are now visible.
         boolean aboveTop = true;
         boolean showHomeBehindStack = false;
-        boolean behindFullscreen = !mStackSupervisor.isFrontStack(this) &&
+        /**
+         * Date: Apr 23, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Multiwindow cannot be behind fullscreen
+         */
+        boolean behindFullscreen = !isMultiwindowStack() && !mStackSupervisor.isFrontStack(this) &&
                 !(forceHomeShown && isHomeStack());
+        /**
+         * Date: Aug 7, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Stack is behindFullscreen, but maybe it isn't. When mw app is launched
+         * from app, than Home is shown in background instead of this particualar
+         * app. Below lines check if non-Home stack is above Home stack.
+         */
+        if (behindFullscreen) {
+            for (ActivityStack as : mStackSupervisor.getStacks()) {
+                if (as == this) {
+                    break;
+                } else if (as.isHomeStack()) {
+                    behindFullscreen = false;
+                    break;
+                }
+            }
+        }
         for (int taskNdx = mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
             final TaskRecord task = mTaskHistory.get(taskNdx);
             final ArrayList<ActivityRecord> activities = task.mActivities;
@@ -1138,7 +1171,7 @@ final class ActivityStack {
                     // Aggregate current change flags.
                     configChanges |= r.configChangeFlags;
 
-                    if (r.fullscreen) {
+                    if (r.isFullscreen()) {
                         // At this point, nothing else needs to be shown
                         if (DEBUG_VISBILITY) Slog.v(TAG, "Fullscreen: at " + r);
                         behindFullscreen = true;
@@ -1265,6 +1298,15 @@ final class ActivityStack {
             ActivityOptions.abort(options);
             if (DEBUG_STATES) Slog.d(TAG, "resumeTopActivityLocked: No more activities go home");
             if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();
+            /**
+             * Date: Aug 7, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * If multiwindow stack was closed, than do not bring home to front.
+             */
+            if (isMultiwindowStack()) {
+                return false;
+            }
             return mStackSupervisor.resumeHomeActivity(prev);
         }
 
@@ -1374,30 +1416,6 @@ final class ActivityStack {
             }
         }
 
-        // We need to start pausing the current activity so the top one
-        // can be resumed...
-        boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving);
-        if (mResumedActivity != null) {
-            pausing = true;
-            startPausingLocked(userLeaving, false);
-            if (DEBUG_STATES) Slog.d(TAG, "resumeTopActivityLocked: Pausing " + mResumedActivity);
-        }
-        if (pausing) {
-            if (DEBUG_SWITCH || DEBUG_STATES) Slog.v(TAG,
-                    "resumeTopActivityLocked: Skip resume: need to start pausing");
-            // At this point we want to put the upcoming activity's process
-            // at the top of the LRU list, since we know we will be needing it
-            // very soon and it would be a waste to let it get killed if it
-            // happens to be sitting towards the end.
-            if (next.app != null && next.app.thread != null) {
-                // No reason to do full oom adj update here; we'll let that
-                // happen whenever it needs to later.
-                mService.updateLruProcessLocked(next.app, true, null);
-            }
-            if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();
-            return true;
-        }
-
         // If the most recent activity was noHistory but was only stopped rather
         // than stopped+finished because the device went to sleep, we need to make
         // sure to finish it as we're making a new activity topmost.
@@ -1706,7 +1724,7 @@ final class ActivityStack {
                         task.addActivityToTop(r);
                         r.putInHistory();
                         mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,
-                                r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,
+                                r.task.taskId, mStackId, r.info.screenOrientation, r.isFullscreen(),
                                 (r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0,
                                 r.userId, r.info.configChanges);
                         if (VALIDATE_TOKENS) {
@@ -1768,7 +1786,7 @@ final class ActivityStack {
             }
             r.updateOptionsLocked(options);
             mWindowManager.addAppToken(task.mActivities.indexOf(r),
-                    r.appToken, r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,
+                    r.appToken, r.task.taskId, mStackId, r.info.screenOrientation, r.isFullscreen(),
                     (r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0, r.userId,
                     r.info.configChanges);
             boolean doShow = true;
@@ -1812,7 +1830,7 @@ final class ActivityStack {
             // If this is the first activity, don't do any fancy animations,
             // because there is nothing for it to animate on top of.
             mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,
-                    r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,
+                    r.task.taskId, mStackId, r.info.screenOrientation, r.isFullscreen(),
                     (r.info.flags & ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != 0, r.userId,
                     r.info.configChanges);
             ActivityOptions.abort(options);
@@ -2729,7 +2747,7 @@ final class ActivityStack {
                 if (r.finishing) {
                     continue;
                 }
-                if (r.fullscreen) {
+                if (r.isFullscreen()) {
                     lastIsOpaque = true;
                 }
                 if (owner != null && r.app != owner) {
@@ -3041,7 +3059,13 @@ final class ActivityStack {
             return;
         }
 
-        mStackSupervisor.moveHomeStack(isHomeStack());
+       /**
+        * Date: Jul 8, 2014
+        * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+        *
+        * There is more stacks than 2 so it is needed to set focus to apropriate stack.
+        */
+        mStackSupervisor.setFocusedStack(tr.stack);
 
         // Shift all activities with this task up to the top
         // of the stack, keeping them in the same internal order.
@@ -3347,7 +3371,7 @@ final class ActivityStack {
                 if (r.appToken == token) {
                         return true;
                 }
-                if (r.fullscreen && !r.finishing) {
+                if (r.isFullscreen() && !r.finishing) {
                     return false;
                 }
             }
@@ -3629,4 +3653,18 @@ final class ActivityStack {
         return "ActivityStack{" + Integer.toHexString(System.identityHashCode(this))
                 + " stackId=" + mStackId + ", " + mTaskHistory.size() + " tasks}";
     }
+
+    /**
+     * Date: Apr 23, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Check check if stack is contains activities which run in window.
+     */
+    public boolean isMultiwindowStack() {
+        return mIsMultiwindowStack;
+    }
+
+    public void setMultiwindowStack(boolean isMultiwindow) {
+        mIsMultiwindowStack = isMultiwindow;
+    }
 }
diff --git a/services/java/com/android/server/am/ActivityStackSupervisor.java b/services/java/com/android/server/am/ActivityStackSupervisor.java
index d616f1b..4b63f93 100644
--- a/services/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/services/java/com/android/server/am/ActivityStackSupervisor.java
@@ -1,5 +1,5 @@
-/*
- * Copyright (C) 2013 The Android Open Source Project
+ /* Copyright (C) 2013 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -53,6 +53,7 @@ import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.content.res.Configuration;
+import android.graphics.Rect;
 import android.os.Binder;
 import android.os.Bundle;
 import android.os.Debug;
@@ -66,6 +67,7 @@ import android.os.Process;
 import android.os.RemoteException;
 import android.os.SystemClock;
 import android.os.UserHandle;
+import android.provider.Settings;
 import android.util.EventLog;
 import android.util.Slog;
 import android.util.SparseIntArray;
@@ -92,6 +94,21 @@ public final class ActivityStackSupervisor {
     static final boolean DEBUG_IDLE = DEBUG || false;
 
     public static final int HOME_STACK_ID = 0;
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Id of home stack on external display
+     */
+    public static final int EXTERNAL_HOME_STACK_ID = 1;
+
+    /**
+     * Date: 4 Apr 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Whether the Tieto Multiwindow is enabled.
+     */
+    public static final String TIETO_MULTIWINDOW_ENABLED = "tieto_multiwindow";
 
     /** How long we wait until giving up on the last activity telling us it is idle. */
     static final int IDLE_TIMEOUT = 10*1000;
@@ -124,8 +141,14 @@ public final class ActivityStackSupervisor {
     /** Dismiss the keyguard after the next activity is displayed? */
     boolean mDismissKeyguardOnNextActivity = false;
 
-    /** Identifier counter for all ActivityStacks */
-    private int mLastStackId = HOME_STACK_ID;
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Identifier counter for all ActivityStacks. Need to iterate from external
+     * stack id.
+     */
+    private int mLastStackId = EXTERNAL_HOME_STACK_ID;
 
     /** Task identifier that activities are currently being started in.  Incremented each time a
      * new task is created. */
@@ -145,12 +168,6 @@ public final class ActivityStackSupervisor {
     /** All the non-launcher stacks */
     private ArrayList<ActivityStack> mStacks = new ArrayList<ActivityStack>();
 
-    private static final int STACK_STATE_HOME_IN_FRONT = 0;
-    private static final int STACK_STATE_HOME_TO_BACK = 1;
-    private static final int STACK_STATE_HOME_IN_BACK = 2;
-    private static final int STACK_STATE_HOME_TO_FRONT = 3;
-    private int mStackState = STACK_STATE_HOME_IN_FRONT;
-
     /** List of activities that are waiting for a new activity to become visible before completing
      * whatever operation they are supposed to do. */
     final ArrayList<ActivityRecord> mWaitingVisibleActivities = new ArrayList<ActivityRecord>();
@@ -240,40 +257,51 @@ public final class ActivityStackSupervisor {
         if (mFocusedStack == null) {
             return mHomeStack;
         }
-        switch (mStackState) {
-            case STACK_STATE_HOME_IN_FRONT:
-            case STACK_STATE_HOME_TO_FRONT:
-                return mHomeStack;
-            case STACK_STATE_HOME_IN_BACK:
-            case STACK_STATE_HOME_TO_BACK:
-            default:
-                return mFocusedStack;
-        }
+        /**
+         * Date: Jul 8, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Get rid of stack states. There is more than two posibile combination
+         * of stack.
+         */
+        return mFocusedStack;
     }
 
     ActivityStack getLastStack() {
-        switch (mStackState) {
-            case STACK_STATE_HOME_IN_FRONT:
-            case STACK_STATE_HOME_TO_BACK:
-                return mHomeStack;
-            case STACK_STATE_HOME_TO_FRONT:
-            case STACK_STATE_HOME_IN_BACK:
-            default:
-                return mFocusedStack;
-        }
+        /**
+         * Date: Jul 8, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Get rid of stack states. There is more than two posibile combination
+         * of stack.
+         * TietoTODO: this function can be removed.
+         */
+        return getFocusedStack();
     }
 
     boolean isFrontStack(ActivityStack stack) {
-        return !(stack.isHomeStack() ^ getFocusedStack().isHomeStack());
+        /**
+         * Date: Jul 8, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Silent assumption that always focused stack is front stack.
+         */
+        return stack == getFocusedStack();
     }
 
     void moveHomeStack(boolean toFront) {
         final boolean homeInFront = isFrontStack(mHomeStack);
         if (homeInFront ^ toFront) {
-            if (DEBUG_STACK) Slog.d(TAG, "moveHomeTask: mStackState old=" +
-                    stackStateToString(mStackState) + " new=" + stackStateToString(homeInFront ?
-                    STACK_STATE_HOME_TO_BACK : STACK_STATE_HOME_TO_FRONT));
-            mStackState = homeInFront ? STACK_STATE_HOME_TO_BACK : STACK_STATE_HOME_TO_FRONT;
+           /**
+            * Date: Jul 8, 2014
+            * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+            *
+            * TietoTODO: I think, this method should be removed, as there is more than
+            * two states of stacks.
+            */
+            if (DEBUG_STACK) Slog.d(TAG, "moveHomeTask toFront:" + toFront + "old=" +
+                    mFocusedStack + " new=" + (homeInFront ? mFocusedStack : mHomeStack));
+            setFocusedStack(homeInFront ? mFocusedStack : mHomeStack);
         }
     }
 
@@ -342,11 +370,18 @@ public final class ActivityStackSupervisor {
             if (DEBUG_STACK) Slog.i(TAG, "removeTask: removing stack " + stack);
             mStacks.remove(stack);
             final int stackId = stack.mStackId;
-            final int nextStackId = mWindowManager.removeStack(stackId);
+            int nextStackId = mWindowManager.removeStack(stackId);
             // TODO: Perhaps we need to let the ActivityManager determine the next focus...
             if (mFocusedStack == null || mFocusedStack.mStackId == stackId) {
-                // If this is the last app stack, set mFocusedStack to null.
-                mFocusedStack = nextStackId == HOME_STACK_ID ? null : getStack(nextStackId);
+                /**
+                 * Date: Aug 7, 2014
+                 * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                 *
+                 * Set focused stack to the next in mStacks. mStacks has pseudo
+                 * queued stacks (please see setFocusedStack method).
+                 */
+                nextStackId = mStacks.get(mStacks.size()-1).mStackId;
+                setFocusedStack(getStack(nextStackId));
             }
         }
     }
@@ -423,21 +458,6 @@ public final class ActivityStackSupervisor {
                 }
             }
         }
-        // TODO: Not sure if this should check if all Paused are complete too.
-        switch (mStackState) {
-            case STACK_STATE_HOME_TO_BACK:
-                if (DEBUG_STACK) Slog.d(TAG, "allResumedActivitiesComplete: mStackState old=" +
-                        stackStateToString(STACK_STATE_HOME_TO_BACK) + " new=" +
-                        stackStateToString(STACK_STATE_HOME_IN_BACK));
-                mStackState = STACK_STATE_HOME_IN_BACK;
-                break;
-            case STACK_STATE_HOME_TO_FRONT:
-                if (DEBUG_STACK) Slog.d(TAG, "allResumedActivitiesComplete: mStackState old=" +
-                        stackStateToString(STACK_STATE_HOME_TO_FRONT) + " new=" +
-                        stackStateToString(STACK_STATE_HOME_IN_FRONT));
-                mStackState = STACK_STATE_HOME_IN_FRONT;
-                break;
-        }
         return true;
     }
 
@@ -452,25 +472,6 @@ public final class ActivityStackSupervisor {
         return true;
     }
 
-    /**
-     * Pause all activities in either all of the stacks or just the back stacks.
-     * @param userLeaving Passed to pauseActivity() to indicate whether to call onUserLeaving().
-     * @return true if any activity was paused as a result of this call.
-     */
-    boolean pauseBackStacks(boolean userLeaving) {
-        boolean someActivityPaused = false;
-        for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
-            final ActivityStack stack = mStacks.get(stackNdx);
-            if (!isFrontStack(stack) && stack.mResumedActivity != null) {
-                if (DEBUG_STATES) Slog.d(TAG, "pauseBackStacks: stack=" + stack +
-                        " mResumedActivity=" + stack.mResumedActivity);
-                stack.startPausingLocked(userLeaving, false);
-                someActivityPaused = true;
-            }
-        }
-        return someActivityPaused;
-    }
-
     boolean allPausedActivitiesComplete() {
         boolean pausing = true;
         for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
@@ -670,8 +671,7 @@ public final class ActivityStackSupervisor {
 
             final long origId = Binder.clearCallingIdentity();
 
-            if (aInfo != null &&
-                    (aInfo.applicationInfo.flags&ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
+            if (aInfo != null && (aInfo.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
                 // This may be a heavy-weight process!  Check to see if we already
                 // have another, different heavy-weight process running.
                 if (aInfo.processName.equals(aInfo.applicationInfo.packageName)) {
@@ -964,6 +964,16 @@ public final class ActivityStackSupervisor {
                 }
             }
             app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_TOP);
+            /**
+             * Date: Mar 25, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * If first activity in task was launch on external display, than
+             * all activities in task should be run on external display. The
+             * same rule is use for activities launched in window.
+             */
+            r.intent.addFlags(r.task.intent.getFlags() & Intent.FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY);
+            r.intent.addFlags(r.task.intent.getFlags() & Intent.FLAG_ACTIVITY_RUN_IN_WINDOW);
             app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,
                     System.identityHashCode(r), r.info,
                     new Configuration(mService.mConfiguration), r.compat,
@@ -1279,67 +1289,164 @@ public final class ActivityStackSupervisor {
                 if (mFocusedStack != taskStack) {
                     if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
                             "adjustStackFocus: Setting focused stack to r=" + r + " task=" + task);
-                    mFocusedStack = taskStack.isHomeStack() ? null : taskStack;
+                    /**
+                     * Date: Jul 8, 2014
+                     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                     *
+                     * Use function for setting focused stack
+                     */
+                    setFocusedStack(taskStack);
                 } else {
                     if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
                         "adjustStackFocus: Focused stack already=" + mFocusedStack);
                 }
                 return taskStack;
             }
+            /**
+             * Date: Feb 27, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * TietoTODO: adjustStackFocus is used in two cases: when activity is created
+             * with flag Intent.FLAG_ACTIVITY_NEW_TASK and in case, which is marked as it
+             * never should happens. see the end of startActivityUncheckedLocked. Maybe it's
+             * worth to remove this method?
+             */
+//            if (mFocusedStack != null) {
+//                if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
+//                        "adjustStackFocus: Have a focused stack=" + mFocusedStack);
+//                return mFocusedStack;
+//            }
 
-            if (mFocusedStack != null) {
-                if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
-                        "adjustStackFocus: Have a focused stack=" + mFocusedStack);
-                return mFocusedStack;
+            // Time to create the first app stack for this user.
+            /**
+             * Date: Mar 21, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Create new stack for application. If app need to be run on external
+             * display, than EXTERNAL_HOME_STACK_ID is used.
+             * Added enable/disable multiwindow functionality.
+             * TietoTODO: There is quiet assumption that task stack id is the same
+             * as stack box id. Can it be different?
+             */
+            int parentStackId = HOME_STACK_ID;
+            int intentFlags = 0;
+
+            boolean multiwindowEnabled = Settings.System.getInt(mContext.getContentResolver(),
+                    Settings.System.TIETO_MULTIWINDOW_ENABLED, 0) != 0;
+            if (multiwindowEnabled && (r.intent != null)) {
+                r.intent.addFlags(Intent.FLAG_ACTIVITY_RUN_IN_WINDOW);
+            }
+
+            intentFlags = (r.intent != null) ? r.intent.getFlags() : 0;
+            boolean isMultiwindow = (intentFlags & Intent.FLAG_ACTIVITY_RUN_IN_WINDOW) != 0;
+
+            /**
+             * Date: Feb 27, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * TietoTODO: this loop returns first stack which is not a homestack
+             * Use the same stack for regular apps (non multiwindow).
+             */
+            if (!isMultiwindow) {
+                for (int stackNdx = mStacks.size() - 1; stackNdx > 0; --stackNdx) {
+                    ActivityStack stack = mStacks.get(stackNdx);
+                    if (!stack.isHomeStack() && !stack.isMultiwindowStack()) {
+                        if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
+                                "adjustStackFocus: Setting focused stack=" + stack);
+                        /**
+                         * Date: Jul 8, 2014
+                         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                         *
+                         * Use function for setting focused stack
+                         */
+                        setFocusedStack(stack);
+                        return mFocusedStack;
+                    }
+                }
             }
 
-            for (int stackNdx = mStacks.size() - 1; stackNdx > 0; --stackNdx) {
-                ActivityStack stack = mStacks.get(stackNdx);
-                if (!stack.isHomeStack()) {
-                    if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
-                            "adjustStackFocus: Setting focused stack=" + stack);
-                    mFocusedStack = stack;
-                    return mFocusedStack;
+            /**
+             * Date: Apr 8, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * This is fix for crashing app, when there is no external display,
+             * but FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY is set.
+             */
+            if ((intentFlags & Intent.FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY) != 0) {
+                if (mWindowManager.isExternalDisplayConnected()) {
+                    parentStackId = EXTERNAL_HOME_STACK_ID;
+                } else {
+                    intentFlags &= ~Intent.FLAG_ACTIVITY_RUN_ON_EXTERNAL_DISPLAY;
                 }
             }
-
-            // Time to create the first app stack for this user.
             int stackId =
-                    mService.createStack(-1, HOME_STACK_ID, StackBox.TASK_STACK_GOES_OVER, 1.0f);
+                    mService.createStack(-1, parentStackId, isMultiwindow ?
+                           StackBox.TASK_FLOATING : StackBox.TASK_STACK_GOES_OVER, 1.0f);
+            /**
+             * Date: Mar 3, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * TietoTODO: how to set position of starting window?
+             * Activities which run on external are run fullscreen. At least
+             * for now
+             */
+            if ((parentStackId == HOME_STACK_ID) && isMultiwindow) {
+                mService.relayoutWindow(stackId, new Rect(200, 400, 700, 1000));
+            }
             if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG, "adjustStackFocus: New stack r=" + r +
                     " stackId=" + stackId);
-            mFocusedStack = getStack(stackId);
+            /**
+             * Date: Jul 8, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Use function for setting focused stack
+             */
+            setFocusedStack(getStack(stackId));
+            /**
+             * Date: Apr 23, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Set stack as multiwindow stack. Stack is created few lines above:
+             * mService.createStack()
+             */
+            mFocusedStack.setMultiwindowStack(isMultiwindow);
             return mFocusedStack;
         }
         return mHomeStack;
     }
 
-    void setFocusedStack(ActivityRecord r) {
+    /**
+     * Date: Jul 8, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Allow other classes to use this method to set focused stack.
+     * There is more possibility to set focused stack than launcher stack and
+     * application stack.
+     */
+    public void setFocusedStack(ActivityRecord r) {
         if (r == null) {
             return;
         }
+        ActivityStack focusedStack;
         if (!r.isApplicationActivity() || (r.task != null && !r.task.isApplicationTask())) {
-            if (mStackState != STACK_STATE_HOME_IN_FRONT) {
-                if (DEBUG_STACK || DEBUG_FOCUS) Slog.d(TAG, "setFocusedStack: mStackState old=" +
-                        stackStateToString(mStackState) + " new=" +
-                        stackStateToString(STACK_STATE_HOME_TO_FRONT) +
-                        " Callers=" + Debug.getCallers(3));
-                mStackState = STACK_STATE_HOME_TO_FRONT;
-            }
+            focusedStack = mHomeStack;
         } else {
             if (DEBUG_FOCUS || DEBUG_STACK) Slog.d(TAG,
                     "setFocusedStack: Setting focused stack to r=" + r + " task=" + r.task +
                     " Callers=" + Debug.getCallers(3));
             final ActivityStack taskStack = r.task.stack;
-            mFocusedStack = taskStack.isHomeStack() ? null : taskStack;
-            if (mStackState != STACK_STATE_HOME_IN_BACK) {
-                if (DEBUG_STACK) Slog.d(TAG, "setFocusedStack: mStackState old=" +
-                        stackStateToString(mStackState) + " new=" +
-                        stackStateToString(STACK_STATE_HOME_TO_BACK) +
-                        " Callers=" + Debug.getCallers(3));
-                mStackState = STACK_STATE_HOME_TO_BACK;
-            }
+            focusedStack = taskStack;
         }
+        setFocusedStack(focusedStack);
+    }
+
+    public void setFocusedStack(ActivityStack stack) {
+        if (DEBUG_STACK) Slog.d(TAG, "setFocusedStack: old=" +
+                mFocusedStack + " new=" + stack +
+                " Callers=" + Debug.getCallers(10));
+        mFocusedStack = stack;
+        mStacks.remove(mFocusedStack);
+        mStacks.add(mFocusedStack);
     }
 
     final int startActivityUncheckedLocked(ActivityRecord r,
@@ -1465,7 +1572,14 @@ public final class ActivityStackSupervisor {
                     targetStack.mLastPausedActivity = null;
                     if (DEBUG_TASKS) Slog.d(TAG, "Bring to front target: " + targetStack
                             + " from " + intentActivity);
-                    moveHomeStack(targetStack.isHomeStack());
+                    /**
+                     * Date: Jul 8, 2014
+                     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                     *
+                     * Get rid of getLastStack. Save last focused stack for later usage.
+                     */
+                    final ActivityStack lastStack = mFocusedStack;
+                    setFocusedStack(targetStack);
                     if (intentActivity.task.intent == null) {
                         // This task was started because of movement of
                         // the activity based on affinity...  now that we
@@ -1479,7 +1593,6 @@ public final class ActivityStackSupervisor {
                     // to have the same behavior as if a new instance was
                     // being started, which means not bringing it to the front
                     // if the caller is not itself in the front.
-                    final ActivityStack lastStack = getLastStack();
                     ActivityRecord curTop = lastStack == null?
                             null : lastStack.topRunningNonDelayedActivityLocked(notTop);
                     if (curTop != null && (curTop.task != intentActivity.task ||
@@ -1684,7 +1797,13 @@ public final class ActivityStackSupervisor {
         if (r.resultTo == null && !addingToTask
                 && (launchFlags&Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {
             targetStack = adjustStackFocus(r);
-            moveHomeStack(targetStack.isHomeStack());
+            /**
+             * Date: Jul 8, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * There is more states than focused launcher stack and application stack.
+             */
+            setFocusedStack(targetStack);
             if (reuseTask == null) {
                 r.setTask(targetStack.createTaskRecord(getNextTaskId(),
                         newTaskInfo != null ? newTaskInfo : r.info,
@@ -1708,8 +1827,14 @@ public final class ActivityStackSupervisor {
         } else if (sourceRecord != null) {
             TaskRecord sourceTask = sourceRecord.task;
             targetStack = sourceTask.stack;
-            moveHomeStack(targetStack.isHomeStack());
             mWindowManager.moveTaskToTop(sourceTask.taskId);
+            /**
+             * Date: Jul 8, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * There is more states than focused launcher stack and application stack.
+             */
+            setFocusedStack(targetStack);
             if (!addingToTask &&
                     (launchFlags&Intent.FLAG_ACTIVITY_CLEAR_TOP) != 0) {
                 // In this case, we are adding the activity to an existing
@@ -1763,7 +1888,13 @@ public final class ActivityStackSupervisor {
             // of a new task...  just put it in the top task, though these days
             // this case should never happen.
             targetStack = adjustStackFocus(r);
-            moveHomeStack(targetStack.isHomeStack());
+            /**
+             * Date: Jul 8, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * There is more states than focused launcher stack and application stack.
+             */
+            setFocusedStack(targetStack);
             ActivityRecord prev = targetStack.topActivity();
             r.setTask(prev != null ? prev.task
                     : targetStack.createTaskRecord(getNextTaskId(), r.info, intent, true),
@@ -2077,8 +2208,15 @@ public final class ActivityStackSupervisor {
 
     int createStack() {
         while (true) {
-            if (++mLastStackId <= HOME_STACK_ID) {
-                mLastStackId = HOME_STACK_ID + 1;
+            /**
+             * Date: Mar 21, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Obvious change. Two stacks are reserved. One for home on default
+             * display, second for home on external display.
+             */
+            if (++mLastStackId <= EXTERNAL_HOME_STACK_ID) {
+                mLastStackId = EXTERNAL_HOME_STACK_ID + 1;
             }
             if (getStack(mLastStackId) == null) {
                 break;
@@ -2099,6 +2237,13 @@ public final class ActivityStackSupervisor {
             return;
         }
         removeTask(task);
+        /**
+         * Date: Feb 27, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * set focused stack  to this, where task was moved
+         */
+        setFocusedStack(stack);
         stack.addTask(task, toTop);
         mWindowManager.addTask(taskId, stackId, toTop);
         resumeTopActivitiesLocked();
@@ -2309,7 +2454,13 @@ public final class ActivityStackSupervisor {
             stack = mHomeStack;
         }
         final boolean homeInFront = stack.isHomeStack();
-        moveHomeStack(homeInFront);
+        /**
+         * Date: Jul 8, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * There is more states than focused launcher stack and application stack.
+         */
+        setFocusedStack(stack);
         mWindowManager.moveTaskToTop(stack.topTask().taskId);
         return homeInFront;
     }
@@ -2388,21 +2539,10 @@ public final class ActivityStackSupervisor {
         }
     }
 
-    private static String stackStateToString(int stackState) {
-        switch (stackState) {
-            case STACK_STATE_HOME_IN_FRONT: return "STACK_STATE_HOME_IN_FRONT";
-            case STACK_STATE_HOME_TO_BACK: return "STACK_STATE_HOME_TO_BACK";
-            case STACK_STATE_HOME_IN_BACK: return "STACK_STATE_HOME_IN_BACK";
-            case STACK_STATE_HOME_TO_FRONT: return "STACK_STATE_HOME_TO_FRONT";
-            default: return "Unknown stackState=" + stackState;
-        }
-    }
-
     public void dump(PrintWriter pw, String prefix) {
         pw.print(prefix); pw.print("mDismissKeyguardOnNextActivity=");
                 pw.println(mDismissKeyguardOnNextActivity);
         pw.print(prefix); pw.print("mFocusedStack=" + mFocusedStack);
-                pw.print(" mStackState="); pw.println(stackStateToString(mStackState));
         pw.print(prefix); pw.println("mSleepTimeout=" + mSleepTimeout);
         pw.print(prefix); pw.println("mCurTaskId=" + mCurTaskId);
         pw.print(prefix); pw.println("mUserStackInFront=" + mUserStackInFront);
diff --git a/services/java/com/android/server/am/TaskRecord.java b/services/java/com/android/server/am/TaskRecord.java
index 9105103..666ee21 100644
--- a/services/java/com/android/server/am/TaskRecord.java
+++ b/services/java/com/android/server/am/TaskRecord.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -198,7 +199,7 @@ final class TaskRecord extends ThumbnailHolder {
 
     void addActivityAtIndex(int index, ActivityRecord r) {
         // Remove r first, and if it wasn't already in the list and it's fullscreen, count it.
-        if (!mActivities.remove(r) && r.fullscreen) {
+        if (!mActivities.remove(r) && r.isFullscreen()) {
             // Was not previously in list.
             numFullscreen++;
         }
@@ -214,7 +215,7 @@ final class TaskRecord extends ThumbnailHolder {
 
     /** @return true if this was the last activity in the task */
     boolean removeActivity(ActivityRecord r) {
-        if (mActivities.remove(r) && r.fullscreen) {
+        if (mActivities.remove(r) && r.isFullscreen()) {
             // Was previously in list.
             numFullscreen--;
         }
diff --git a/services/java/com/android/server/input/InputManagerService.java b/services/java/com/android/server/input/InputManagerService.java
index 11d3954..b6991e6 100644
--- a/services/java/com/android/server/input/InputManagerService.java
+++ b/services/java/com/android/server/input/InputManagerService.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,6 +67,7 @@ import android.util.Log;
 import android.util.Slog;
 import android.util.SparseArray;
 import android.util.Xml;
+import android.view.Display;
 import android.view.IInputFilter;
 import android.view.IInputFilterHost;
 import android.view.InputChannel;
@@ -438,12 +440,23 @@ public class InputManagerService extends IInputManager.Stub
      * @return The input channel.
      */
     public InputChannel monitorInput(String inputChannelName) {
+        return monitorInput(inputChannelName, Display.DEFAULT_DISPLAY);
+    }
+
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Variation of monitorInput to allow monitor specific display.
+     */
+    public InputChannel monitorInput(String inputChannelName, int displayId) {
         if (inputChannelName == null) {
             throw new IllegalArgumentException("inputChannelName must not be null.");
         }
         
         InputChannel[] inputChannels = InputChannel.openInputChannelPair(inputChannelName);
         nativeRegisterInputChannel(mPtr, inputChannels[0], null, true);
+        inputChannels[0].setDisplayId(displayId);
         inputChannels[0].dispose(); // don't need to retain the Java object reference
         return inputChannels[1];
     }
diff --git a/services/java/com/android/server/wm/DimLayer.java b/services/java/com/android/server/wm/DimLayer.java
index c189ddd..e0f2cd0 100644
--- a/services/java/com/android/server/wm/DimLayer.java
+++ b/services/java/com/android/server/wm/DimLayer.java
@@ -1,4 +1,19 @@
 // Copyright 2012 Google Inc. All Rights Reserved.
+/*
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
 package com.android.server.wm;
 
@@ -166,7 +181,14 @@ public class DimLayer {
 
         final int dw, dh;
         final float xPos, yPos;
-        if (mStack.hasSibling()) {
+        /**
+         * Date: Feb 27, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Set dim layer size to stackbox size.
+         * TietoTODO: maybe its good to set DimLayer size to stackbox?
+         */
+        if (mStack.hasSibling() || mStack.mStackBox.isCrappyRelayouted()) {
             dw = mBounds.width();
             dh = mBounds.height();
             xPos = mBounds.left;
diff --git a/services/java/com/android/server/wm/DisplayContent.java b/services/java/com/android/server/wm/DisplayContent.java
index d358b4c..7e11bd2 100644
--- a/services/java/com/android/server/wm/DisplayContent.java
+++ b/services/java/com/android/server/wm/DisplayContent.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2012 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,6 +18,7 @@
 package com.android.server.wm;
 
 import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
+import static com.android.server.am.ActivityStackSupervisor.EXTERNAL_HOME_STACK_ID;
 import static com.android.server.wm.WindowManagerService.DEBUG_STACK;
 import static com.android.server.wm.WindowManagerService.DEBUG_VISIBILITY;
 import static com.android.server.wm.WindowManagerService.TAG;
@@ -105,6 +107,17 @@ class DisplayContent {
     /** Detect user tapping outside of current focused stack bounds .*/
     Region mTouchExcludeRegion = new Region();
 
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: This is dirty hack. It is used together with mTouchExcludeRegion
+     * in StackTapPointerEventListener to check which Display is currently focused.
+     * I think it need to be done in different way to allow focus window on
+     * every screen at the same time.
+     */
+    static int sCurrentTouchedDisplay = Display.DEFAULT_DISPLAY;
+
     /** Save allocating when retrieving tasks */
     private ArrayList<Task> mTaskHistory = new ArrayList<Task>();
 
@@ -124,9 +137,18 @@ class DisplayContent {
         isDefaultDisplay = mDisplayId == Display.DEFAULT_DISPLAY;
         mService = service;
 
-        StackBox newBox = new StackBox(service, this, null);
+        StackBox newBox = new StackBox(service, this, null,
+                isDefaultDisplay ? HOME_STACK_ID : EXTERNAL_HOME_STACK_ID);
         mStackBoxes.add(newBox);
-        TaskStack newStack = new TaskStack(service, HOME_STACK_ID, this);
+        /**
+         * Date: Mar 19, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Create stack with home id for primary display, and with external id
+         * for second display. Only two displays are supported for now.
+         */
+        TaskStack newStack = new TaskStack(service,
+                isDefaultDisplay ? HOME_STACK_ID : EXTERNAL_HOME_STACK_ID, this);
         newStack.mStackBox = newBox;
         newBox.mStack = newStack;
         mHomeStack = newStack;
@@ -176,22 +198,24 @@ class DisplayContent {
 
         final int userId = task.mUserId;
         int taskNdx;
+        boolean isFloating = task.mStack.mStackBox.isFloating();
         final int numTasks = mTaskHistory.size();
         if (toTop) {
             for (taskNdx = numTasks - 1; taskNdx >= 0; --taskNdx) {
-                if (mTaskHistory.get(taskNdx).mUserId == userId) {
+                if ((mTaskHistory.get(taskNdx).mUserId == userId) &&
+                (isFloating || !mTaskHistory.get(taskNdx).mStack.mStackBox.isFloating())){
                     break;
                 }
             }
             ++taskNdx;
         } else {
             for (taskNdx = 0; taskNdx < numTasks; ++taskNdx) {
-                if (mTaskHistory.get(taskNdx).mUserId == userId) {
+                if ((mTaskHistory.get(taskNdx).mUserId == userId) &&
+                (!isFloating || mTaskHistory.get(taskNdx).mStack.mStackBox.isFloating())) {
                     break;
                 }
             }
         }
-
         mTaskHistory.add(taskNdx, task);
         EventLog.writeEvent(EventLogTags.WM_TASK_MOVED, task.taskId, toTop ? 1 : 0, taskNdx);
     }
@@ -232,7 +256,14 @@ class DisplayContent {
         TaskStack newStack = null;
         if (DEBUG_STACK) Slog.d(TAG, "createStack: stackId=" + stackId + " relativeStackBoxId="
                 + relativeStackBoxId + " position=" + position + " weight=" + weight);
-        if (stackId == HOME_STACK_ID) {
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Add support for external display.
+         */
+        if ((stackId == HOME_STACK_ID) ||
+                ((stackId == EXTERNAL_HOME_STACK_ID) && !isDefaultDisplay)) {
             if (mStackBoxes.size() != 1) {
                 throw new IllegalArgumentException("createStack: HOME_STACK_ID (0) not first.");
             }
@@ -242,17 +273,22 @@ class DisplayContent {
             for (stackBoxNdx = mStackBoxes.size() - 1; stackBoxNdx >= 0; --stackBoxNdx) {
                 final StackBox box = mStackBoxes.get(stackBoxNdx);
                 if (position == StackBox.TASK_STACK_GOES_OVER
-                        || position == StackBox.TASK_STACK_GOES_UNDER) {
+                        || position == StackBox.TASK_STACK_GOES_UNDER
+                        || position == StackBox.TASK_FLOATING) {
                     // Position indicates a new box is added at top level only.
                     if (box.contains(relativeStackBoxId)) {
-                        StackBox newBox = new StackBox(mService, this, null);
+                        StackBox newBox = new StackBox(mService, this, position, null);
                         newStack = new TaskStack(mService, stackId, this);
                         newStack.mStackBox = newBox;
                         newBox.mStack = newStack;
-                        final int offset = position == StackBox.TASK_STACK_GOES_OVER ? 1 : 0;
-                        if (DEBUG_STACK) Slog.d(TAG, "createStack: inserting stack at " +
-                                (stackBoxNdx + offset));
-                        mStackBoxes.add(stackBoxNdx + offset, newBox);
+                        if (position == StackBox.TASK_FLOATING) {
+                            mStackBoxes.add(newBox);
+                        } else {
+                            final int offset = position == StackBox.TASK_STACK_GOES_UNDER ? 0 : 1;
+                            if (DEBUG_STACK) Slog.d(TAG, "createStack: inserting stack at " +
+                                    (stackBoxNdx + offset));
+                            mStackBoxes.add(stackBoxNdx + offset, newBox);
+                        }
                         break;
                     }
                 } else {
@@ -263,10 +299,6 @@ class DisplayContent {
                     }
                 }
             }
-            if (stackBoxNdx < 0) {
-                throw new IllegalArgumentException("createStack: stackBoxId " + relativeStackBoxId
-                        + " not found.");
-            }
         }
         if (newStack != null) {
             layoutNeeded = true;
@@ -289,9 +321,13 @@ class DisplayContent {
     }
 
     void addStackBox(StackBox box, boolean toTop) {
-        if (mStackBoxes.size() >= 2) {
-            throw new RuntimeException("addStackBox: Too many toplevel StackBoxes!");
-        }
+        /**
+         * Date: Mar 3, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Allow creation of unlimited amount of stackboxes
+         * TietoTODO: regular and floating stackobxes!!!!!!!!!!!!!!!!!!!!!!!
+         */
         mStackBoxes.add(toTop ? mStackBoxes.size() : 0, box);
     }
 
@@ -321,6 +357,13 @@ class DisplayContent {
             info.children[0] = getStackBoxInfo(box.mFirst);
             info.children[1] = getStackBoxInfo(box.mSecond);
         }
+        /**
+         * Date: May 27, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Propagate information about floating stacks
+         */
+        info.floating = box.isFloating();
         return info;
     }
 
@@ -333,26 +376,36 @@ class DisplayContent {
     }
 
     /**
-     * Move the home StackBox to the top or bottom of mStackBoxes. That is the only place
-     * it is allowed to be. This is a nop if the home StackBox is already in the correct position.
-     * @param toTop Move home to the top of mStackBoxes if true, to the bottom if false.
-     * @return true if a change was made, false otherwise.
+     * Date: Jul 8, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Move stackBox to top. As there is more stacks than two,
+     * the moveHomeStackBox can't be used.
      */
-    boolean moveHomeStackBox(boolean toTop) {
-        if (DEBUG_STACK) Slog.d(TAG, "moveHomeStackBox: toTop=" + toTop + " Callers=" +
-                Debug.getCallers(4));
-        EventLog.writeEvent(EventLogTags.WM_HOME_STACK_MOVED, toTop ? 1 : 0);
-        switch (mStackBoxes.size()) {
-            case 0: throw new RuntimeException("moveHomeStackBox: No home StackBox!");
-            case 1: return false; // Only the home StackBox exists.
-            case 2:
-                if (homeOnTop() ^ toTop) {
-                    mStackBoxes.add(mStackBoxes.remove(0));
-                    return true;
+    boolean moveStackBoxToTop(int stackId) {
+        StackBox stackBox = null;
+        for (StackBox sb : mStackBoxes) {
+            if (sb.getStackId() == stackId) {
+                stackBox = sb;
+                break;
+            }
+        }
+        if (stackBox == null) {
+            return false;
+        }
+        mStackBoxes.remove(stackBox);
+        if (stackBox.isFloating()) {
+           mStackBoxes.add(stackBox);
+        } else {
+            int i = 0;
+            for (; i < mStackBoxes.size(); i++) {
+                if (mStackBoxes.get(i).isFloating()) {
+                    break;
                 }
-                return false;
-            default: throw new RuntimeException("moveHomeStackBox: Too many toplevel StackBoxes!");
+            }
+            mStackBoxes.add(i, stackBox);
         }
+        return true;
     }
 
     /**
@@ -377,9 +430,59 @@ class DisplayContent {
         return null;
     }
 
+    /**
+     * Date: Feb 27, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * our glorious relayoutStackBox, stacboxes
+     * inside other stackboxes are not supported. who cares?
+     */
+    boolean relayoutStackBox(int stackBoxId, Rect pos) {
+        for (StackBox sb : mStackBoxes) {
+            if ((sb.getStackId() == stackBoxId) &&
+                 (sb.relayoutStackBox(pos))) {
+                layoutNeeded = true;
+                return true;
+            }
+        }
+        return false;
+    }
+
     int stackIdFromPoint(int x, int y) {
-        StackBox topBox = mStackBoxes.get(mStackBoxes.size() - 1);
-        return topBox.stackIdFromPoint(x, y);
+        /**
+         * Date: Feb 27, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Modified for support multiple boxes
+         */
+        int idx = mStackBoxes.size() -1;
+        for (;idx > -1; idx--) {
+            StackBox sb = mStackBoxes.get(idx);
+            int stackId = sb.stackIdFromPoint(x, y);
+            if (stackId != -1) {
+                ArrayList<Task> tasks = sb.mStack.getTasks();
+                for (Task task : tasks) {
+                    addTask(task, true);
+                }
+                mService.rebuildAppWindowListLocked();
+                mService.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_FRONT, true);
+                mService.executeAppTransition();
+                if (sb.isFloating()) {
+                    mStackBoxes.add(mStackBoxes.remove(idx));
+                } else {
+                    StackBox stackBox = mStackBoxes.remove(idx);
+                    int i = 0;
+                    for (; i < mStackBoxes.size(); i++) {
+                        if (mStackBoxes.get(i).isFloating()) {
+                            break;
+                        }
+                    }
+                    mStackBoxes.add(i, stackBox);
+                }
+                return stackId;
+            }
+        }
+        return -1;
     }
 
     void setTouchExcludeRegion(TaskStack focusedStack) {
diff --git a/services/java/com/android/server/wm/DragState.java b/services/java/com/android/server/wm/DragState.java
index a737939..560e279 100644
--- a/services/java/com/android/server/wm/DragState.java
+++ b/services/java/com/android/server/wm/DragState.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -414,11 +415,7 @@ class DragState {
             }
 
             child.getTouchableRegion(mTmpRegion);
-
-            final int touchFlags = flags &
-                    (WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
-                            | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);
-            if (mTmpRegion.contains(x, y) || touchFlags == 0) {
+            if (mTmpRegion.contains(x, y)) {
                 // Found it
                 touchedWin = child;
                 break;
diff --git a/services/java/com/android/server/wm/StackBox.java b/services/java/com/android/server/wm/StackBox.java
index d351925..0aabe48 100644
--- a/services/java/com/android/server/wm/StackBox.java
+++ b/services/java/com/android/server/wm/StackBox.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2013 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +21,7 @@ import android.graphics.Rect;
 import android.util.Slog;
 
 import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
+import static com.android.server.am.ActivityStackSupervisor.EXTERNAL_HOME_STACK_ID;
 import static com.android.server.wm.WindowManagerService.DEBUG_STACK;
 import static com.android.server.wm.WindowManagerService.TAG;
 
@@ -42,8 +44,18 @@ public class StackBox {
     public static final int TASK_STACK_GOES_OVER = 6;
     /** Used with {@link WindowManagerService#createStack}. Put on a lower layer on display. */
     public static final int TASK_STACK_GOES_UNDER = 7;
+    /**
+     * Date: Apr 11, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Used with {@link WindowManagerService#createStack}. Indicates that stackbox
+     * contains floating stack, which can be moved anywhere.
+     */
+    public static final int TASK_FLOATING = 8;
 
-    static int sCurrentBoxId = 0;
+    private boolean mIsFloating = false;
+
+    static int sCurrentBoxId = 1;
 
     /** Unique id for this box */
     final int mStackBoxId;
@@ -85,14 +97,55 @@ public class StackBox {
     /** Used to keep from reallocating a temporary Rect for propagating bounds to child boxes */
     Rect mTmpRect = new Rect();
 
-    StackBox(WindowManagerService service, DisplayContent displayContent, StackBox parent) {
+    /**
+     * Date: Mar 21, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Create home stackbox for primary and external screen. Should be used
+     * only in DisplayContent constructor.
+     */
+    StackBox(WindowManagerService service, DisplayContent displayContent,
+            StackBox parent, int stackBoxId) {
+        mStackBoxId = stackBoxId;
+        mService = service;
+        mDisplayContent = displayContent;
+        // This ctor is used only for creating home stacks
+        init(parent, -1);
+    }
+
+    StackBox(WindowManagerService service, DisplayContent displayContent, int stackType, StackBox parent) {
         synchronized (StackBox.class) {
+            /**
+             * Date: Mar 21, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Prohibit from creating stacks with ids reserved for homes for
+             * default and external screen.
+             */
+            if (sCurrentBoxId <= EXTERNAL_HOME_STACK_ID) {
+                sCurrentBoxId = EXTERNAL_HOME_STACK_ID + 1;
+            }
             mStackBoxId = sCurrentBoxId++;
         }
-
         mService = service;
         mDisplayContent = displayContent;
+        init(parent, stackType);
+    }
+
+    private void init(StackBox parent, int stackType) {
         mParent = parent;
+        mIsFloating = stackType == TASK_FLOATING;
+    }
+
+    /**
+     * Date: Apr 11, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Indicates whether stackbox is floating stackbox, which can be moved
+     * anywhere.
+     */
+    public boolean isFloating() {
+        return mIsFloating;
     }
 
     /** Propagate #layoutNeeded bottom up. */
@@ -220,11 +273,11 @@ public class StackBox {
                 break;
         }
 
-        mFirst = new StackBox(mService, mDisplayContent, this);
+        mFirst = new StackBox(mService, mDisplayContent, -1, this);
         firstStack.mStackBox = mFirst;
         mFirst.mStack = firstStack;
 
-        mSecond = new StackBox(mService, mDisplayContent, this);
+        mSecond = new StackBox(mService, mDisplayContent, -1, this);
         secondStack.mStackBox = mSecond;
         mSecond.mStack = secondStack;
 
@@ -283,6 +336,15 @@ public class StackBox {
         return true;
     }
 
+    /**
+     * Date: Feb 27, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: indicates whether stackbox was relayouted using relayoutWindow.
+     * Is there any better way?
+     */
+    private boolean mCrappyRelayouted = false;
+
     /** If this is a terminal StackBox (contains a TaskStack) set the bounds.
      * @param bounds The rectangle to set the bounds to.
      * @param underStatusBar True if the StackBox is directly below the Status Bar.
@@ -296,8 +358,17 @@ public class StackBox {
         if (mStack != null) {
             change |= !mBounds.equals(bounds);
             if (change) {
-                mBounds.set(bounds);
-                mStack.setBounds(bounds, underStatusBar);
+                /**
+                 * Date: Feb 27, 2014
+                 * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                 *
+                 * TietoTODO: indicates, that stackbox was relayouted using
+                 * relayoutWindow. is any better way?
+                 */
+                if (!mCrappyRelayouted) {
+                    mBounds.set(bounds);
+                }
+                mStack.setBounds(mBounds, underStatusBar);
             }
         } else {
             mTmpRect.set(bounds);
@@ -322,6 +393,31 @@ public class StackBox {
         return change;
     }
 
+    /**
+     * Date: Feb 27, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Relayouts stackbox
+     */
+    boolean relayoutStackBox(Rect bounds) {
+        mCrappyRelayouted = true;
+        if (mBounds.equals(bounds)) {
+            return false;
+        }
+        mBounds.set(bounds);
+        return true;
+    }
+
+    /**
+     * Date: Feb 27, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: indicates that window was relayouted
+     */
+    boolean isCrappyRelayouted() {
+        return mCrappyRelayouted;
+    }
+
     void resetAnimationBackgroundAnimator() {
         if (mStack != null) {
             mStack.resetAnimationBackgroundAnimator();
diff --git a/services/java/com/android/server/wm/StackTapPointerEventListener.java b/services/java/com/android/server/wm/StackTapPointerEventListener.java
index 19d8ab3..138d601 100644
--- a/services/java/com/android/server/wm/StackTapPointerEventListener.java
+++ b/services/java/com/android/server/wm/StackTapPointerEventListener.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2013 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -71,10 +72,19 @@ public class StackTapPointerEventListener implements PointerEventListener {
                 if (mPointerId == motionEvent.getPointerId(index)) {
                     final int x = (int)motionEvent.getX(index);
                     final int y = (int)motionEvent.getY(index);
+                    /**
+                     * Date: Apr 3, 2014
+                     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                     *
+                     * TietoTODO: Dirty hack to check if previous tap was done
+                     * on different screen.
+                     */
                     if ((motionEvent.getEventTime() - motionEvent.getDownTime())
                             < TAP_TIMEOUT_MSEC
                             && (x - mDownX) < mMotionSlop && (y - mDownY) < mMotionSlop
-                            && !mTouchExcludeRegion.contains(x, y)) {
+                            && (!mTouchExcludeRegion.contains(x, y)
+                               || DisplayContent.sCurrentTouchedDisplay != mDisplayContent.getDisplayId())) {
+                        DisplayContent.sCurrentTouchedDisplay = mDisplayContent.getDisplayId();
                         mService.mH.obtainMessage(H.TAP_OUTSIDE_STACK, x, y,
                                 mDisplayContent).sendToTarget();
                     }
diff --git a/services/java/com/android/server/wm/TaskStack.java b/services/java/com/android/server/wm/TaskStack.java
index cb29df4..ac20fe9 100644
--- a/services/java/com/android/server/wm/TaskStack.java
+++ b/services/java/com/android/server/wm/TaskStack.java
@@ -122,7 +122,13 @@ public class TaskStack {
 
         task.mStack = this;
         mDisplayContent.addTask(task, toTop);
-        return mDisplayContent.moveHomeStackBox(mStackId == HOME_STACK_ID);
+        /**
+         * Date: Jul 8, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * More than two stacks, it is needed to use new method.
+         */
+        return mDisplayContent.moveStackBoxToTop(mStackId);
     }
 
     boolean moveTaskToTop(Task task) {
diff --git a/services/java/com/android/server/wm/WindowManagerService.java b/services/java/com/android/server/wm/WindowManagerService.java
index 59e8e2c..6374cb3 100644
--- a/services/java/com/android/server/wm/WindowManagerService.java
+++ b/services/java/com/android/server/wm/WindowManagerService.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -540,6 +541,14 @@ public class WindowManagerService extends IWindowManager.Stub
     boolean mAnimateWallpaperWithTarget;
 
     AppWindowToken mFocusedApp = null;
+    /**
+     * Date: Apr 2, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Holds information about currently focused display. Needed for multidisplay.
+     * Useful for finding focused window.
+     */
+    DisplayContent mFocusedDisplayContent = null;
 
     PowerManagerService mPowerManager;
 
@@ -609,7 +618,14 @@ public class WindowManagerService extends IWindowManager.Stub
     SparseArray<Task> mTaskIdToTask = new SparseArray<Task>();
     SparseArray<TaskStack> mStackIdToStack = new SparseArray<TaskStack>();
 
-    private final PointerEventDispatcher mPointerEventDispatcher;
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * Multiple pointer listeners for every screen. Used for switching between
+     * task stacks.
+     */
+    private final SparseArray<PointerEventDispatcher> mPointerEventDispatcherArray = new SparseArray<PointerEventDispatcher>();
 
     final class DragInputEventReceiver extends InputEventReceiver {
         public DragInputEventReceiver(InputChannel inputChannel, Looper looper) {
@@ -745,7 +761,8 @@ public class WindowManagerService extends IWindowManager.Stub
         mDisplaySettings = new DisplaySettings(context);
         mDisplaySettings.readSettingsLocked();
 
-        mPointerEventDispatcher = new PointerEventDispatcher(mInputManager.monitorInput(TAG));
+        mPointerEventDispatcherArray.append(Display.DEFAULT_DISPLAY,
+                new PointerEventDispatcher(mInputManager.monitorInput(TAG)));
 
         mFxSession = new SurfaceSession();
         mDisplayManager = (DisplayManager)context.getSystemService(Context.DISPLAY_SERVICE);
@@ -4800,11 +4817,13 @@ public class WindowManagerService extends IWindowManager.Stub
                 }
                 final TaskStack stack = task.mStack;
                 final DisplayContent displayContent = task.getDisplayContent();
-                final boolean isHomeStackTask = stack.isHomeStack();
-                if (isHomeStackTask != displayContent.homeOnTop()) {
-                    // First move the stack itself.
-                    displayContent.moveHomeStackBox(isHomeStackTask);
-                }
+                /**
+                 * Date: Jul 8, 2014
+                 * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                 *
+                 * There is more than two stacks. Than it is needed to use moveStackBoxToTop.
+                 */
+                displayContent.moveStackBoxToTop(stack.mStackId);
                 stack.moveTaskToTop(task);
             }
         } finally {
@@ -4864,6 +4883,14 @@ public class WindowManagerService extends IWindowManager.Stub
                 }
             }
             Slog.e(TAG, "createStack: Unable to find relativeStackBoxId=" + relativeStackBoxId);
+            /**
+             * Date: Mar 20, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Moved from DisplayContent.createStack()
+             */
+            throw new IllegalArgumentException("createStack: stackBoxId " + relativeStackBoxId
+                    + " not found.");
         }
     }
 
@@ -5150,14 +5177,23 @@ public class WindowManagerService extends IWindowManager.Stub
                 mAnimatorDurationScale };
     }
 
+    /**
+     * Date: Apr 3, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: Use this function only for default display. Since there are
+     * many PointerEventDispatcher (one for display), maybe its worth to change
+     * adjust registerPointerEventListener to support multiple displays? Needs
+     * more investigation.
+     */
     @Override
     public void registerPointerEventListener(PointerEventListener listener) {
-        mPointerEventDispatcher.registerInputEventListener(listener);
+        mPointerEventDispatcherArray.get(Display.DEFAULT_DISPLAY).registerInputEventListener(listener);
     }
 
     @Override
     public void unregisterPointerEventListener(PointerEventListener listener) {
-        mPointerEventDispatcher.unregisterInputEventListener(listener);
+        mPointerEventDispatcherArray.get(Display.DEFAULT_DISPLAY).unregisterInputEventListener(listener);
     }
 
     // Called by window manager policy. Not exposed externally.
@@ -6754,7 +6790,15 @@ public class WindowManagerService extends IWindowManager.Stub
                 mH.removeMessages(H.REPORT_HARD_KEYBOARD_STATUS_CHANGE);
                 mH.sendEmptyMessage(H.REPORT_HARD_KEYBOARD_STATUS_CHANGE);
             }
-            if (!mHardKeyboardEnabled) {
+            /**
+             * Date: Apr 2, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Force to display keyboard always when there is external display
+             * connected. Needed to show one keyboard for internal display, and
+             * use external keybaord on external display
+             */
+            if ((!mHardKeyboardEnabled) || (mDisplayContents.size() > 1)) {
                 config.keyboard = Configuration.KEYBOARD_NOKEYS;
             }
 
@@ -6980,7 +7024,18 @@ public class WindowManagerService extends IWindowManager.Stub
     }
 
     public void displayReady() {
-        displayReady(Display.DEFAULT_DISPLAY);
+        /**
+         * Date: Mar 21, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Initialize all displays. If Android is connected to external display
+         * during startup, it is needed to initialize all display, not only
+         * default display.
+         */
+        Display[] displays = mDisplayManager.getDisplays();
+        for (Display d : displays) {
+            displayReady(d.getDisplayId());
+        }
 
         synchronized(mWindowMap) {
             final DisplayContent displayContent = getDefaultDisplayContentLocked();
@@ -7518,6 +7573,13 @@ public class WindowManagerService extends IWindowManager.Stub
                 case TAP_OUTSIDE_STACK: {
                     int stackId;
                     synchronized (mWindowMap) {
+                        /**
+                         * Date: Apr 2, 2014
+                         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+                         *
+                         * Set focused display content.
+                         */
+                        mFocusedDisplayContent = (DisplayContent)msg.obj;
                         stackId = ((DisplayContent)msg.obj).stackIdFromPoint(msg.arg1, msg.arg2);
                     }
                     if (stackId >= 0) {
@@ -7959,8 +8021,15 @@ public class WindowManagerService extends IWindowManager.Stub
     }
 
     final void rebuildAppWindowListLocked() {
-        // TODO: Multidisplay, when ActivityStacks and tasks exist on more than one display.
-        rebuildAppWindowListLocked(getDefaultDisplayContentLocked());
+        /**
+         * Date: Apr 4, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Multidisplay support
+         */
+        for (int i = 0; i < mDisplayContents.size(); i++) {
+            rebuildAppWindowListLocked(mDisplayContents.valueAt(i));
+        }
     }
 
     private void rebuildAppWindowListLocked(final DisplayContent displayContent) {
@@ -9764,6 +9833,12 @@ public class WindowManagerService extends IWindowManager.Stub
             mH.removeMessages(H.REPORT_FOCUS_CHANGE);
             mH.sendEmptyMessage(H.REPORT_FOCUS_CHANGE);
             // TODO(multidisplay): Focused windows on default display only.
+            /**
+             * Date: Apr 15, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * TietoTODO: Focused window on default display only!
+             */
             final DisplayContent displayContent = getDefaultDisplayContentLocked();
             final boolean imWindowChanged = moveInputMethodWindowsIfNeededLocked(
                     mode != UPDATE_FOCUS_WILL_ASSIGN_LAYERS
@@ -9823,17 +9898,73 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         final int displayCount = mDisplayContents.size();
+        /**
+         * Date: Apr 1, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Support for multidisplay.
+         */
+        if (mFocusedDisplayContent != null) {
+            WindowState win = findFocusedWindowLocked(mFocusedDisplayContent);
+            if (win != null) {
+                return win;
+            }
+        }
         for (int i = 0; i < displayCount; i++) {
             final DisplayContent displayContent = mDisplayContents.valueAt(i);
             WindowState win = findFocusedWindowLocked(displayContent);
             if (win != null) {
+                mFocusedDisplayContent = displayContent;
                 return win;
             }
         }
         return null;
     }
 
+    /**
+     * Date: Apr 8, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * It is used only for new activity creation. If intent which starts activity
+     * has flag FLAG_ACTIVITY_RUN_ON_EXTERNAL display set, than it is needed
+     * to prohibit launching that activiyt on external display.
+     */
+    public boolean isExternalDisplayConnected() {
+        synchronized (mWindowMap) {
+            return mDisplayContents.size() > 1;
+        }
+    }
+
+
+    /**
+     * Date: Apr 2, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * TietoTODO: Big WTF! Why mFocusedApp cannot be used?
+     */
     private WindowState findFocusedWindowLocked(DisplayContent displayContent) {
+        /**
+         * Date: Apr 23, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * If there is focused app than use it for find focused window. Z-order
+         * is not always the best choice. Launcher need to be always on bottom.
+         */
+        if (mFocusedApp != null) {
+            Iterator<WindowState> iter = mFocusedApp.allAppWindows.iterator();
+            WindowState maxWin = null;
+            while (iter.hasNext()) {
+                WindowState win = iter.next();
+                if ((win.mAttrs.type != TYPE_APPLICATION_STARTING) &&
+                        !win.mExiting &&
+                        (maxWin == null || (maxWin.mLayer < win.mLayer))) {
+                    maxWin = win;
+                }
+            }
+            if (maxWin != null) {
+                return maxWin;
+            }
+        }
         final WindowList windows = displayContent.getWindowList();
         for (int i = windows.size() - 1; i >= 0; i--) {
             final WindowState win = windows.get(i);
@@ -10762,11 +10893,22 @@ public class WindowManagerService extends IWindowManager.Stub
         }
         configureDisplayPolicyLocked(displayContent);
 
-        // TODO: Create an input channel for each display with touch capability.
-        if (displayId == Display.DEFAULT_DISPLAY) {
-            displayContent.mTapDetector = new StackTapPointerEventListener(this, displayContent);
-            registerPointerEventListener(displayContent.mTapDetector);
-        }
+        /**
+         * Date: Apr 2, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Support for multidisplay
+         * TietoTODO: is synchronization needed here?
+         */
+        displayContent.mTapDetector = new StackTapPointerEventListener(this, displayContent);
+        String name =  TAG + " display " + displayId;
+        // special case for default display, which is initialized in WMS ctor
+        PointerEventDispatcher ped = mPointerEventDispatcherArray.get(displayId);
+        if (ped == null) {
+            ped = new PointerEventDispatcher(mInputManager.monitorInput(name, displayId));
+        }
+        ped.registerInputEventListener(displayContent.mTapDetector);
+        mPointerEventDispatcherArray.put(displayId, ped);
 
         return displayContent;
     }
@@ -10847,11 +10989,29 @@ public class WindowManagerService extends IWindowManager.Stub
 
     private void handleDisplayRemovedLocked(int displayId) {
         final DisplayContent displayContent = getDisplayContentLocked(displayId);
+        /**
+         * Date: Apr 2, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * Release display content when display is removed
+         */
+        mFocusedDisplayContent = null;
         if (displayContent != null) {
             mDisplayContents.delete(displayId);
             displayContent.close();
-            if (displayId == Display.DEFAULT_DISPLAY) {
-                unregisterPointerEventListener(displayContent.mTapDetector);
+            /**
+             * Date: Apr 3, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Support for multidisplay. Pointer event dispatcher is released
+             * only for external displays, because it is created in newDisplayContentLocked.
+             */
+            PointerEventDispatcher ped = mPointerEventDispatcherArray.get(displayId);
+            if (ped != null) {
+                ped.unregisterInputEventListener(displayContent.mTapDetector);
+            }
+            if (displayId != Display.DEFAULT_DISPLAY) {
+                mPointerEventDispatcherArray.remove(displayId);
             }
             WindowList windows = displayContent.getWindowList();
             while (!windows.isEmpty()) {
@@ -10878,4 +11038,24 @@ public class WindowManagerService extends IWindowManager.Stub
     public Object getWindowManagerLock() {
         return mWindowMap;
     }
+
+    /**
+     * Date: Feb 27, 2014
+     * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+     *
+     * For stackBox relayout
+     */
+    public boolean relayoutWindow(int stackID, Rect pos) {
+        synchronized (mWindowMap) {
+            final int numDisplays = mDisplayContents.size();
+            for (int displayNdx = 0; displayNdx < numDisplays; ++displayNdx) {
+                if (mDisplayContents.valueAt(displayNdx).relayoutStackBox(stackID, pos)) {
+                    performLayoutAndPlaceSurfacesLocked();
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
 }
diff --git a/services/java/com/android/server/wm/WindowState.java b/services/java/com/android/server/wm/WindowState.java
index 4d53cea..b8391af 100644
--- a/services/java/com/android/server/wm/WindowState.java
+++ b/services/java/com/android/server/wm/WindowState.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2011 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -358,9 +359,7 @@ final class WindowState implements WindowManagerPolicy.WindowState {
                 mAttrs.type <= LAST_SUB_WINDOW)) {
             // The multiplier here is to reserve space for multiple
             // windows in the same type layer.
-            mBaseLayer = mPolicy.windowTypeToLayerLw(
-                    attachedWindow.mAttrs.type) * WindowManagerService.TYPE_LAYER_MULTIPLIER
-                    + WindowManagerService.TYPE_LAYER_OFFSET;
+            mBaseLayer = attachedWindow.mBaseLayer;
             mSubLayer = mPolicy.subWindowTypeToLayerLw(a.type);
             mAttachedWindow = attachedWindow;
             if (WindowManagerService.DEBUG_ADD_REMOVE) Slog.v(TAG, "Adding " + this + " to " + mAttachedWindow);
@@ -397,9 +396,23 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             mIsWallpaper = attachedWindow.mAttrs.type == TYPE_WALLPAPER;
             mIsFloatingLayer = mIsImWindow || mIsWallpaper;
         } else {
+            /**
+             * Date: Apr 23, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * If window is started in multiwindow, than it is going to be
+             * launched in layer TYPE_MULTIWINDOW_APPLICATION (above normal apps).
+             */
+            int type = a.type;
+            if (mToken != null && mToken.appWindowToken != null) {
+                Task task = mService.mTaskIdToTask.get(mToken.appWindowToken.groupId);
+                if (task.mStack.mStackBox.isFloating()) {
+                    type = WindowManager.LayoutParams.TYPE_MULTIWINDOW_APPLICATION;
+                }
+            }
             // The multiplier here is to reserve space for multiple
             // windows in the same type layer.
-            mBaseLayer = mPolicy.windowTypeToLayerLw(a.type)
+            mBaseLayer = mPolicy.windowTypeToLayerLw(type)
                     * WindowManagerService.TYPE_LAYER_MULTIPLIER
                     + WindowManagerService.TYPE_LAYER_OFFSET;
             mSubLayer = 0;
@@ -463,9 +476,15 @@ final class WindowState implements WindowManagerPolicy.WindowState {
         mHaveFrame = true;
 
         TaskStack stack = mAppToken != null ? getStack() : null;
-        if (stack != null && stack.hasSibling()) {
+        /**
+         * Date: Mar 3, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * If stackbox was relayouted, than use value from stackbox for parent frame
+         */
+        if (stack != null && (stack.hasSibling() || stack.mStackBox.isFloating())) {
             mContainingFrame.set(getStackBounds(stack));
-            if (mUnderStatusBar) {
+            if (mUnderStatusBar && !stack.mStackBox.isFloating()) {
                 mContainingFrame.top = pf.top;
             }
         } else {
@@ -548,35 +567,43 @@ final class WindowState implements WindowManagerPolicy.WindowState {
 
         //System.out.println("Out: " + mFrame);
 
-        // Now make sure the window fits in the overall display.
-        Gravity.applyDisplay(mAttrs.gravity, df, mFrame);
-
-        // Make sure the content and visible frames are inside of the
-        // final window frame.
-        mContentFrame.set(Math.max(mContentFrame.left, mFrame.left),
-                Math.max(mContentFrame.top, mFrame.top),
-                Math.min(mContentFrame.right, mFrame.right),
-                Math.min(mContentFrame.bottom, mFrame.bottom));
-
-        mVisibleFrame.set(Math.max(mVisibleFrame.left, mFrame.left),
-                Math.max(mVisibleFrame.top, mFrame.top),
-                Math.min(mVisibleFrame.right, mFrame.right),
-                Math.min(mVisibleFrame.bottom, mFrame.bottom));
-
-        mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left, 0),
-                Math.max(mOverscanFrame.top - mFrame.top, 0),
-                Math.max(mFrame.right - mOverscanFrame.right, 0),
-                Math.max(mFrame.bottom - mOverscanFrame.bottom, 0));
-
-        mContentInsets.set(mContentFrame.left - mFrame.left,
-                mContentFrame.top - mFrame.top,
-                mFrame.right - mContentFrame.right,
-                mFrame.bottom - mContentFrame.bottom);
-
-        mVisibleInsets.set(mVisibleFrame.left - mFrame.left,
-                mVisibleFrame.top - mFrame.top,
-                mFrame.right - mVisibleFrame.right,
-                mFrame.bottom - mVisibleFrame.bottom);
+        /**
+         * Date: Feb 27, 2014
+         * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+         *
+         * if window is floating (multiwindow), it doesn't need to fit display
+         */
+        if ((stack == null) || (!stack.mStackBox.isFloating())) {
+            // Now make sure the window fits in the overall display.
+            Gravity.applyDisplay(mAttrs.gravity, df, mFrame);
+
+            // Make sure the content and visible frames are inside of the
+            // final window frame.
+            mContentFrame.set(Math.max(mContentFrame.left, mFrame.left),
+                    Math.max(mContentFrame.top, mFrame.top),
+                    Math.min(mContentFrame.right, mFrame.right),
+                    Math.min(mContentFrame.bottom, mFrame.bottom));
+
+            mVisibleFrame.set(Math.max(mVisibleFrame.left, mFrame.left),
+                    Math.max(mVisibleFrame.top, mFrame.top),
+                    Math.min(mVisibleFrame.right, mFrame.right),
+                    Math.min(mVisibleFrame.bottom, mFrame.bottom));
+
+            mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left, 0),
+                    Math.max(mOverscanFrame.top - mFrame.top, 0),
+                    Math.max(mFrame.right - mOverscanFrame.right, 0),
+                    Math.max(mFrame.bottom - mOverscanFrame.bottom, 0));
+
+            mContentInsets.set(mContentFrame.left - mFrame.left,
+                    mContentFrame.top - mFrame.top,
+                    mFrame.right - mContentFrame.right,
+                    mFrame.bottom - mContentFrame.bottom);
+
+            mVisibleInsets.set(mVisibleFrame.left - mFrame.left,
+                    mVisibleFrame.top - mFrame.top,
+                    mFrame.right - mVisibleFrame.right,
+                    mFrame.bottom - mVisibleFrame.bottom);
+        }
 
         mCompatFrame.set(mFrame);
         if (mEnforceSizeCompat) {
diff --git a/services/jni/com_android_server_input_InputManagerService.cpp b/services/jni/com_android_server_input_InputManagerService.cpp
index 4ab2086..f43de38 100644
--- a/services/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/jni/com_android_server_input_InputManagerService.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2010 The Android Open Source Project
+ * Copyright (C) 2014 Tieto Poland Sp. z o.o.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -317,14 +318,19 @@ void NativeInputManager::setDisplayViewport(bool external, const DisplayViewport
             changed = true;
             v = viewport;
 
-            if (!external) {
-                sp<PointerController> controller = mLocked.pointerController.promote();
-                if (controller != NULL) {
-                    controller->setDisplayViewport(
-                            viewport.logicalRight - viewport.logicalLeft,
-                            viewport.logicalBottom - viewport.logicalTop,
-                            viewport.orientation);
-                }
+            /**
+             * Date: Mar 21, 2014
+             * Copyright (C) 2014 Tieto Poland Sp. z o.o.
+             *
+             * Allow setting viewport for internal and external display.
+             * This cause to display pointer on external display.
+             */
+            sp<PointerController> controller = mLocked.pointerController.promote();
+            if (controller != NULL) {
+                controller->setDisplayViewport(
+                        viewport.logicalRight - viewport.logicalLeft,
+                        viewport.logicalBottom - viewport.logicalTop,
+                        viewport.orientation, viewport.displayId);
             }
         }
     }
-- 
1.9.1

