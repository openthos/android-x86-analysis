WindowControl：

WindowControl方法1：relayoutWindow。
调用处：
（1）toggleFullScreen 两处
		全屏化和全屏恢复操作出发触发
（2）onMinimize 一处
		最小化时触发
（3）onTouchWindow 两处
		缩放完毕以及窗口启动时触发
		
调用链：
relayoutWindow(int stackId, Rect rect) in PhoneWindow.java/TaskStack.java
	-> relayoutWindow(int stackId, Rect r) in ActivityManagerNative.java
		-> relayoutWindow(int stackId, Rect r) in ActivityManagerService.java
			-> relayoutWindow(int stackId, Rect pos) in WindowManagerService.java
				-> relayoutStack(int stackId, Rect pos) in DisplayContent.java
					-> setBoundsByForce(Rect bounds) in TaskStack.java
				-> performLayoutAndPlaceSurfacesLocked() in WindowManagerService.java
					
实现策略：通过一系列调用最终将ActivityStack对应的TaskStack的边界通过setBoundsByForce方法来强制变更，之后通过调用performLayoutAndPlaceSurfacesLocked来重新布局窗口内容，从而达到将窗口大小改变的目的。



FocusChange：

FocusChange方法1：setFocusedStack。
调用处：
（1）DecorMW 一处
		当DecorMW构造完毕时进行前置。
（2）onTouchWindow 三处
		当窗口被点击时以及缩放完毕时前置。

调用链：
setFocusedStack() in PhoneWindow.java
	-> setFocusedStack(int stackId) in ActivityManagerNative.java
		-> setFocusedStack(int stackId) in ActivityManagerService.java
			-> setFocusedActivityLocked(ActivityRecord r, String reason) in ActivityManagerService.java
				-> setFocusedStack(ActivityRecord r, String reason) in ActivityStackSupervisor.java
					-> setFocusedStack(int stackId) in ActivityStackSupervisor.java
				-> setFocusedApp(IBinder token, boolean moveFocusNow) in WindowManagerService.java
			-> moveTaskToFront(int taskId, int flags, Bundle options) in ActivityManagerService.java
				-> moveTaskToFrontLocked(int taskId, int flags, Bundle options) in ActivityManagerService.java
					-> findTaskToMoveToFrontLocked(TaskRecord task, int flags, Bundle options, String reason) in ActivityStackSupervisor.java
						-> moveTaskToFrontLocked(int taskId, int flags, Bundle options) in ActivityStack.java
							-> moveToFront(String reason) in ActivityStack.java
								-> moveTaskToTop(int taskId) in WindowManagerService.java
实现策略：
首先通过需要进行前置的窗口对应的ActivityStackId来查找对应的ActivityStack，之后将该ActivityStack对应的App前置，并将该App中需要进行相应的Task前置，来完成整个窗口的前置。过程中ActivityStack的前置和Task数据内容的前置都通过将其从所在列表中删除再添加的方式完成，显示内容则交由WindowManagerService中的方法来完成。

FocusChange方法2：unsetFocusedStack()
调用处：
（1）onMinimize 一处
		当窗口最小化时失去Focus，故调用此方法。

调用链：
unsetFocusedStack() in PhoneWindow.java/WindowManager.java
	-> unsetFocusedStack(int stackId) in PhoneWindow.java
		-> unsetFocusedStack(int stackId) in ActivityManagerNative.java
			-> unsetFocusedStack(int stackId) in ActivityManagerService.java
				-> getUpdateStack() in ActivityStackSupervisor.java 
				-> setFocusedActivityLocked(ActivityRecord r, String reason) in ActivityManagerService.java
实现策略：
查找ActivityStack列表中最前位置的一个处于屏幕内部的ActivityStack，将其前置，以此来将原本前置的ActivityStack变为非前置。剩下步骤同setFocusedStack中的步骤。




